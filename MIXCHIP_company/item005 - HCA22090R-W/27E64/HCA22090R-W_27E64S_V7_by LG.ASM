;IRC16M
;****************************************************************************
Chip SN8F27E64
//{{SONIX_CODE_OPTION
	.Code_Option	WDT_CLK		Flosc/8
	.Code_Option	Reset_Pin	P04
	.Code_Option	LVD		LVD_M		; 1.8V Reset Enable LVD24 bit of PFLAG for 2.4V Low Voltage Indicator
	.Code_Option	Watch_Dog	Enable
	.Code_Option	Low_Fcpu	Flosc/1
	.Code_Option	High_Clk	IHRC_16M	; Internal 16M RC Oscillator
	.Code_Option	High_Fcpu	Fhosc/8
	.Code_Option	Security	Enable
	.Code_Option	Noise_Filter	Enable
//}}SONIX_CODE_OPTION
.NOLIST
	INCLUDESTD	macro1.h
	INCLUDESTD	macro2.h
	INCLUDESTD	macro3.h
.LIST

;**********************************************************
.DATA
	ORG		0X00			;BANK 0
acc_bak     	DS	1
status_bak     	DS	1
FLAG1		DS	1
PRO_F		EQU	FLAG1.0
BZON_F		EQU	FLAG1.1
WIFIONF_F	EQU	FLAG1.2
KRELAX_F	EQU	FLAG1.3
ONFKRELAX_F	EQU	FLAG1.4
FINISH_F	EQU	FLAG1.5
HL_F		EQU	FLAG1.6
IRK_B		EQU	FLAG1.7

FLAG2		DS	1
DIVFINISH_F		EQU	FLAG2.0
POWERON_F		EQU	FLAG2.1
TMSET_F			EQU	FLAG2.2
KEYIN_F			EQU	FLAG2.3
NOBZ_F			EQU	FLAG2.4
DEFINE_F		EQU	FLAG2.5
DPOFF_F			EQU	FLAG2.6
ADFINISH_B		EQU	FLAG2.7

FLAG3		DS	1
DS_TM1S_F		EQU	FLAG3.0
TM2ONE0_F		EQU	FLAG3.1
TM2OFFE0_F		EQU	FLAG3.2
CHKSPACE_TM1S_F		EQU	FLAG3.3
KP3S_F			EQU	FLAG3.4
HEXGT100_F		EQU	FLAG3.5
TEST_F			EQU	FLAG3.6
;		EQU	FLAG3.7


FLAG6		DS	1
TEMPSSERR_F	EQU	FLAG6.0
TEMPSSOPEN_F	EQU	FLAG6.1
TEMPSSSHORT_F	EQU	FLAG6.2
CWBH_F		EQU	FLAG6.3
TEMPUPDN_F	EQU	FLAG6.4
PEIDUI_F	EQU	FLAG6.5
TESTBT_F	EQU	FLAG6.6
DNTM_F		EQU	FLAG6.7

FLAG8		DS	1
TX1628D_F	EQU	FLAG8.0
DPALLON_F	EQU	FLAG8.1

TM_100MS	DS	1
INT_CNT		DS	1
TC0INT_CNT	DS	1
;MAIN_CNT	DS	1


DATA_BUF	DS	1
HEXD		DS	1
DECD		DS	1
TM_DIG		DS	1
;DP_MODE	DS	1
;DP_TM		DS	1
OUTP_TM		DS	1

ONF	DS	1			;0:OFF,1:YY;2:ON
;WORK_MODE	DS	1
SPEED		DS	1
SPEED_OUT	DS	1
SPEED_DP	DS	1
SPEED_AUTO	DS	1

KP_TM		DS	1

MODE		DS	1
;TM_STEP		DS	1
BZ_MODE	DS	1
BZ_TM		DS     1

TM_10MS	DS	1
TM_1S		DS	1
TM_1MIN		DS	1
TM_MIN2OFF		DS	1
TM_MIN2ON		DS	1
TM_HOUR2OFF	DS	1
TM_HOUR2ON	DS	1
TM_MIN_BUF		DS	1
TM_HOUR_BUF	DS	1
;TM_1HR		DS	1

;KEYOFF_TMNS	DS	1
LEDFLASH_STEP	DS	1
LEDFLASH_TM	DS	1

PULSE		DS	1
L_CNT1		DS	1
H_CNT1		DS	1
DATALP_CNT	DS	1
DATAL		DS	1
DATAH		DS	1
B_CNT1		DS	1
DATAL2		DS	1
DATAH2		DS	1
DATAL3		DS	1
DATAH3		DS	1
IRPRESS_TM	DS	1
IR_DATAL_BUF	DS	1

AD_SEL		DS	1
CHKSPACE_TMNS	DS	1
ADCHK_CNT	DS	1
AD_DATAH	DS	1

CHK_TEMP_BUF	DS	1
TEMP_CHK	DS	1
TEMP_CMP	DS	1

LEDTX_BIT	DS	1
COMMAND_MODE	DS	1
COMMAND_DATA	DS	1
COMMAND_ADDRESS	DS	1
COMMAND_BUF	DS	1
LEDP_CNT	DS	1

KEY_CNT		DS	1

;AUTO_TM1MIN	DS	1
;AUTO_TM1HR		DS	1
;AUTO_TMNHR		DS	1
NTC_ERR		DS	1


DEL_CNT		DS	1
;TM_CNT		DS	1


R_EEPROMMODE	DS	1
WR0		DS	1
WR1		DS	1
WR4		DS	1
R_KEY_BUFL	DS	1
;R_KEY_BUFH	DS	1
;DATA_BUF	DS	1
TOUCHNO_TM	DS	1
FLAG7		DS	1
I2C_ERROR	EQU	FLAG7.0
READ_FLAG	EQU	FLAG7.1
PRESS_FLAG	EQU	FLAG7.2
TOUCHON_F	EQU	FLAG7.3
TKEYIN_F	EQU	FLAG7.4

TRX_FLAG	DS	1
TX_F		EQU	TRX_FLAG.0
RXRELAX_F	EQU	TRX_FLAG.1
RXFINISH_F	EQU	TRX_FLAG.2
TXDTM1S_F	EQU	TRX_FLAG.3
RFD01_F		EQU	TRX_FLAG.4
STATUSC_F	EQU	TRX_FLAG.5

RXBZ_FLAG	DS	1
RXBZKEY_F	EQU	RXBZ_FLAG.0
RXBZON_F	EQU	RXBZ_FLAG.1
RXBZOFF_F	EQU	RXBZ_FLAG.2


RX_DATA_BUF		DS	1
RX_PC_BUF	DS	1
RX_LCNT			DS	1
RX_HCNT			DS	1
RX_STEP			DS	1		;0:CHK 4.4MS L START
                                ;1:CHK DATAH 140US OR 400US, REPEAT 24BIT,2:CHK DATAL 440US OR 160US                                                     
RX_BIT		DS	1
RXNO_TM		DS	1

TX_DATA_BUF	DS	1
TX_PC_BUF	DS	1
TX_STEP		DS	1
TX_TM		DS	1
TX_BIT		DS	1
TX_LOOP		DS	1
;TX_SPACE	DS	1
TXD_STEP	DS	1	;0:TYPE,1:STATUS
TXD_TMNS	DS	1
TABLE_PC	DS	1
DATA_TYPE	DS	1

ORG	0X60
TX_D0	EQU	0X60

ORG		0X70			;SPI DATA_BUF
RX_D0	EQU	0X70

	ORG		0X7F
;*************************************************************
;BANK1 ;100-1FFH
	ORG		100H

	
;*************************************************************
;BANK2 ;200-27FH
	ORG		200H
	
;*************************************************************
CLOCK		EQU	P5.0		;´¥ÃþIC
CLOCK_MODE	EQU	P5M.0
DATA		EQU	P4.7		;
DATA_MODE	EQU	P4M.7	;
LINGMINGDU_VAL	EQU	#8AH

LEDSTB_B	EQU	P1.3
LEDCLK_B	EQU	P1.4
LEDDATA_B	EQU	P1.5

IRIN_B	EQU	P0.3

BZOUT_B	EQU	P1.6

HT1_B	EQU	P0.2
HT2_B	EQU	P0.1

TXDATA_B	EQU	P4.6
RXDATA_B	EQU	P4.5


;****************************
AA_B	EQU	0
BB_B	EQU	1
CC_B	EQU	2
DD_B	EQU	3
EE_B	EQU	4
FF_B	EQU	5
GG_B	EQU	6
HH_B	EQU	7

;*************************************************************
.CONST	
V_PWM_T	EQU	130
V_PWMC_TM	EQU	15

V_TM1S	EQU	64
V_MOTSPMAX	EQU	760*12*25/600	;1S MAX SP

V_TM1MIN	EQU	60

USERID		EQU	0FH

	
	V_TC0		EQU	256-250
	
	V_ADR	EQU	10H
	V_TM1MIN_TEST	EQU	10
	V_TM3MIN		EQU	180
	V_TM3MIN_TEST	EQU	30
	
V_TXD0_TM	EQU	2
V_TXD1_TM	EQU	6

V_CMD_CX	EQU	81H
V_CMD_PD	EQU	82H
V_WAIT_TM	EQU	100

V_DF_NAT_DATA_RAM_AddrH	EQU	01H
V_DF_NAT_DATA_RAM_AddrL	EQU	00H

V_DF_SLP_DATA_RAM_AddrH	EQU	01H
V_DF_SLP_DATA_RAM_AddrL	EQU	30H

V_DF_TM_DATA_RAM_AddrH		EQU	01H
V_DF_TM_DATA_RAM_AddrL		EQU	60H

V_DF_SW_DATA_RAM_AddrH	EQU	01H
V_DF_SW_DATA_RAM_AddrL		EQU	90H

V_DF_ZNF_DATA_RAM_AddrH	EQU	01H
V_DF_ZNF_DATA_RAM_AddrL	EQU	0C0H

V_CM_DEVICE_ADR	EQU	34H
V_CM_LMD_ADR	EQU	40H
V_CM_KEYD_ADR	EQU	20H

;*************************************************************
	Device_address	equ	0x02		;Æ÷¼þµØÖ·
	CMD_Write	equ	0xA1		;Ð´ÃüÁî
	CMD_Read	equ	0xA2		;¶ÁÃüÁî
	CMD_Erase	equ	0xA3		;²Á³ýÃüÁî
;****************************
TMCLRP	MACRO
	CLR		TM_1MIN
	CLR		TM_MIN2OFF
	CLR		TM_MIN2ON
	CLR		TM_HOUR2OFF
	CLR		TM_HOUR2ON	
        ENDM
;****************************
MOVCMP	MACRO
	B0ADD	Z,A
	B0BTS1	FC
	JMP		$+2
	INCMS	Y
	NOP
	MOVC	
	ENDM	
	
;****************************************************************************
.code
	org	00h
	jmp	start
	
	ORG		08H
	JMP		WAKE_ISR	;NO USE
	ORG		09H
	JMP		INT0_ISR		;NO USE
	ORG		0AH
	JMP		INT1_ISR		;NO USE
	ORG		0BH
	JMP		T0_ISR		;NO USE
	ORG		0CH
	JMP		TC0_ISR		;125US 
	ORG		0DH	
	JMP		TC1_ISR		;NO USE
	ORG		0EH	
	JMP		TC2_ISR		;NO USE
	ORG		0FH	
	JMP		T1_ISR		;NO USE
	ORG		10H	
	JMP		ADC_ISR		;NO USE
	ORG		11H	
	JMP		SIO_ISR		;NO USE
	ORG		12H	
	JMP		MSP_ISR		;NO USE
	org		13h
	JMP		UART_RX_ISR
	ORG		14H
	JMP		UART_TX_ISR
	ORG	15H
;************************
LCD_TABLE1:
	DW	003FH   ;0
	DW	0006H	;1
	DW	005BH	;2
	DW	004FH	;3
	DW	0066H	;4
	DW	006DH	;5
	DW	007DH	;6
	DW	0007H	;7
	DW	007FH	;8
	DW	006FH	;9  
	DW	0000H	;A
	DW	0000H	;B
	DW	0039H	;C
	DW	005EH	;D
	DW	0077H	;E		;A
	DW	0071H	;F	  	;F
;************************
ADGT10C_TABLE1:
	DW	0C9H		;0
	DW	0BFH		;1
	DW	0B5H		;2
	DW	0ABH		;3
	DW	9FH		;4
	DW	98H		;5
	DW	91H		;6
	DW	8AH		;7
	DW	83H		;8
	DW	7CH		;9    
	DW	78H		;10   
	DW	74H		;11
	DW	70H		;12
	DW	6AH		;13
	DW	64H		;14
	DW	60H		;15
	DW	5CH		;16
	DW	58H		;17
	DW	54H		;18
	DW	4EH		;19
	DW	4CH		;20
	DW	4AH		;21
	DW	48H		;22
	DW	44H		;23
	DW	40H		;24
	DW	3EH		;25
	DW	3CH		;26
	DW	3AH		;27
	DW	37H		;28
	DW	34H		;29
	DW	32H		;30
	DW	30H		;31
	DW	2EH		;32
	DW	2CH		;33
	DW	2AH		;34
	DW	28H		;35
	DW	26H		;36
	DW	24H		;37
	DW	22H		;38
	DW	20H		;39
	DW	00H		;END
;************************
TEMP_SET_TABLE:
	DW	18	;0
	DW	23	;1
	DW	28	;2
		
;************************
;************************
TYPE_TABLE1:
	DW	0A0H,48H,55H,32H,32H,30H,39H,30H,52H,2DH,57H,31H,0FFH

;************************
	org	100h
;********************************
start:	
	mov	a,#0x7f			;Reset STKP
	b0mov	stkp,a			;
     MOV    A,#00H
    MOV    OSCM,A
    CLR    INTEN0
    CLR    INTEN1
    CLR    INTRQ0  
    CLR    INTRQ1
    B0BCLR FGIE                  ;DIS GLOBE INT                
    @RST_WDT                            ;  
WAIT_100MS:
	MOV	A,#100
	MOV	TM_1MIN,A	
WAIT_1MS:	
   @RST_WDT                            ;  
	MOV	A,#250
	MOV	TM_1S,A
WAIT_10US:
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	DECMS	TM_1S
	JMP	WAIT_10US
	DECMS	TM_1MIN
	JMP		WAIT_1MS	
 
    @RST_WDT
    MOV    A,#7FH
    MOV    STKP,A
    MOV    A,#00H
    MOV    OSCM,A
    CLR    INTEN0
    CLR    INTEN1
    CLR    INTRQ0  
    CLR    INTRQ1
	CALL	CLR_RAM			;
	CALL	INITP	
;	call	UART_Init		;Init SIO Hardware
	B0BSET	FGIE			;
    @RST_WDT
;*********************************		
	MOV	A,#0		;AAH
	MOV	TEMP_CHK,A
	MOV	A,#50
	MOV	CHKSPACE_TMNS,A
	BSET	KRELAX_F
	MOV		A,#10
	MOV		LEDP_CNT,A	
	BSET	KEYIN_F
;****************************************
	NOP
;****************************************
MAIN:
	BTS1	PRO_F
	JMP	MAIN
	BCLR	PRO_F		;10MS
	MOV	A,#0X5A			;Reset Watchdog
	B0MOV	WDTR,A			;	
;	mov		a,#20h
;	xor		p4,a				;test
	B0BTS0	FSTKOV
	jmp		MAIN_STACK_OVER
    	CALL	LEDP
     	CALL	IR_PROCESS
	JMP		TOUCHP
TOUCHPE:	
     CALL	KEYP
     CALL	BZP
      CALL	AI_MODEP
      CALL	OUTP
      CALL	TXDP
      CALL	RXDP
      CALL	TME0_CHKP
      CALL	TM_DNP
      BCLR	TEMPSSERR_F
      BTS0	TEMPSSOPEN_F
      BSET	TEMPSSERR_F
      BTS0	TEMPSSSHORT_F
      BSET	TEMPSSERR_F
MAIN1:          
	BTS1	CHKSPACE_TM1S_F
     JMP	MAIN2
     BCLR		CHKSPACE_TM1S_F	
     INCMS	CHKSPACE_TMNS
     NOP
     MOV		A,CHKSPACE_TMNS
     SUB		A,#5		;30
     BTS1	FC
     JMP	MAIN2
     MOV	A,#50
     MOV	CHKSPACE_TMNS,A
    JMP    MAIN2               ;                 
MAIN2:						;10MS
     CALL	ADP
    JMP    MAIN                                   
	JMP		MAIN
MAIN_STACK_OVER:	
	JMP	$					;STACK OVER ,RESET	
;******************************************
;******************************************
TC0_ISR:
	B0BCLR	FTC0IRQ				;125US
;	mov		a,#02h
;	xor		p4,a					;test
	INCMS	TC0INT_CNT
	NOP
	MOV		A,TC0INT_CNT
	SUB		A,#80			;MUST EVEN
	BTS1	FC
	JMP		TC0_ISR1
	CLR		TC0INT_CNT
	BSET	PRO_F				;10MS
TC0_ISR1:
	BTS1	BZON_F
	JMP		TC0_ISR11
	MOV		A,#40H
	XOR		P1,A		
	JMP		TC0_ISR2
TC0_ISR11:
	BCLR	BZOUT_B	
TC0_ISR2:
	CALL	TXP
	INCMS	INT_CNT
	NOP
	BTS0	INT_CNT.0
    	CALL	IR_CHK                  ;
    	CALL	RX_CHKP
    	CALL	TM1SP
;	mov		a,#04h
;	xor		p1,a			;test
TC0_ISRE:	
 	RETI
;************************************************************
WAKE_ISR:
	B0BCLR	FWAKEIRQ
 	RETI
INT0_ISR:
	B0BCLR	FP00IRQ
 	RETI
INT1_ISR:
	B0BCLR	FP01IRQ
 	RETI
T0_ISR:
	B0BCLR	FT0IRQ
 	RETI

;******************************************
TC1_ISR:
	B0BCLR	FTC1IRQ
 	RETI
TC2_ISR:
	B0BCLR	FTC2IRQ
 	RETI
T1_ISR:
	B0BCLR	FT1IRQ
 	RETI
ADC_ISR:
	B0BCLR	FADCIRQ
 	RETI
SIO_ISR:
	B0BCLR	FSIOIRQ
 	RETI
MSP_ISR:
	B0BCLR	FMSPIRQ
 	RETI
	 		
 ;UART interrupt
 ;****************************************************************************
UART_TX_ISR:
	B0BCLR	FUTXIRQ
UART_TX_ISRE:
	RETI
 ;****************************************************************************
UART_RX_ISR:
	B0BCLR	FURXIRQ
UART_RX_ISRE:
	RETI
;****************************************************************************
;******************************************************************************
CLR_RAM:
	b0mov	y,#0
	b0mov	z,#0X7F
clr_ram10:				;bank 0
	clr	@yz
	decms	z
	jmp	clr_ram10
	clr	@yz
	b0mov	y,#1
	b0mov	z,#0XFF
clr_ram11:				;bank 1
	clr	@yz
	decms	z
	jmp	clr_ram11
	clr	@yz
	b0mov	y,#2
	b0mov	z,#0X7F
clr_ram12:				;bank 2
	clr	@yz
	decms	z
	jmp	clr_ram12
	clr	@yz
clr_ram90:
	ret
;****************************************************************************
INITP:					
	MOV		A,#00H
	MOV		P0,A
	MOV		A,#0E7H
	MOV		P0M,A
	MOV		A,#00H
	MOV		P0,A	
	MOV		A,#00H
	MOV		P0UR,A
	
	MOV		A,#38H
	MOV		P1,A
	MOV		A,#0FFH
	MOV		P1M,A
	MOV		A,#38H
	MOV		P1,A
	MOV		A,#00H
	MOV		P1UR,A
	
	MOV		A,#08H
	MOV		P5CON,A		;P5.3 AD INPUT
	MOV		A,#01H
	MOV		P5,A
	MOV		A,#0F7H
	MOV		P5M,A
	MOV		A,#00H
	MOV		P5,A
	MOV		A,#00
	MOV		P5UR,A
	
	MOV		A,#02H
	MOV		P4CON,A		;AS I/O,NO AD INPUT
	MOV		A,#80H
	MOV		P4,A	
	MOV		A,#0DDH
	MOV		P4M,A
	MOV		A,#80H
	MOV		P4,A	
	MOV		A,#0A0H
	MOV		P4UR,A	
	
	CLR		T0M
	CLR		TC0M
	CLR		TC1M
	CLR		TC2M
	CLR		T1M	
	MOV		A,#70H
	MOV		TC0M,A
	MOV		A,#V_TC0
	MOV		TC0C,A
	MOV		TC0R,A
	BCLR	FTC0IRQ
	B0BSET	FTC0ENB
	B0BSET	FTC0IEN				;EN TC0 INT
	MOV		A,#1BH
	MOV		ADM,A			;SEL AN11
	MOV		A,#30H
	MOV		ADR,A		;AD CLOCK SOURCE FCPU/8,10BIT AD LOW 2BIT AS AD DATA
	RET
;******************************************
TME0_CHKP:
	BCLR	TM2ONE0_F
	MOV		A,TM_MIN2ON
	BTS1	FZ
	BSET	TM2ONE0_F
	MOV		A,TM_HOUR2ON
	BTS1	FZ
	BSET	TM2ONE0_F

	BCLR	TM2OFFE0_F
	MOV		A,TM_MIN2OFF
	BTS1	FZ
	BSET	TM2OFFE0_F
	MOV		A,TM_HOUR2OFF
	BTS1	FZ
	BSET	TM2OFFE0_F
	RET
;**************************	
BZP:
	INCMS	BZ_TM
	NOP
	MOV		A,BZ_MODE
	XOR		A,#1
	BTS0	FZ
	JMP		BZP1	
	MOV		A,BZ_MODE
	XOR		A,#2
	BTS0	FZ
	JMP		BZP2	
	MOV		A,BZ_MODE
	XOR		A,#3
	BTS0	FZ
	JMP		BZP3	
BZP_OFF:
	CLR		BZ_MODE
	CLR		BZ_TM
BZP_OFF1:
	BCLR	BZON_F
;	MOV		A,#74H
;	MOV		TC0M,A
	RET					
BZP_ON:
;	MOV		A,#0F6H
;	MOV		TC0M,A
	BSET	BZON_F
	RET
BZP1:
	MOV		A,BZ_TM
	SUB		A,#14
	BTS1	FC
	JMP		BZP_ON
	JMP		BZP_OFF	
	
BZP2:						;KAIJI
	MOV		A,BZ_TM
	SUB		A,#14
	BTS1	FC
	JMP		BZP_ON
;	INCMS	BZ_TM
;	NOP
	MOV		A,BZ_TM
	SUB		A,#19
	BTS1	FC
	JMP		BZP_OFF1
;	INCMS	BZ_TM
;	NOP
	MOV		A,BZ_TM
	SUB		A,#33
	BTS1	FC
	JMP		BZP_ON
	JMP		BZP_OFF	
BZP3:					;GUANJI
	MOV		A,BZ_TM
	SUB		A,#33
	BTS1	FC
	JMP		BZP_ON
	JMP		BZP_OFF	
;********************************************		
TOUCHP:
F_EEPROMSERVICE:
	INCMS	TM_100MS
	NOP
	MOV		A,TM_100MS
	SUB		A,#10
	BTS1	FC
	JMP		TOUCHPE
	CLR		TM_100MS	
	MOV	A,R_EEPROMMODE
	@JMP_A	3						;
	JMP		F_WRITELINGMINGDU
	JMP		F_RANDLINGMINGDU
	JMP		F_READKEY
F_WRITELINGMINGDU:
	B0BCLR	I2C_ERROR
	B0BSET	DATA_MODE
	CALL	F_STARTCODE
	MOV	A,#V_CM_DEVICE_ADR	;34H
	MOV	DATA_BUF,A		;I2C	µØÖ·
	B0BCLR	FC
	RLCM	DATA_BUF		;1=READ   0=WRITE
	CALL	F_SENDWORK		;SEND WRITE CODE AND PAGE
	CALL	F_CHKACK
	B0BTS0	I2C_ERROR
	JMP	F_EEPROMERROR
	MOV	A,#V_CM_LMD_ADR		;40H	;µ÷½ÚÁéÃô¶ÈµØÖ·
	MOV	DATA_BUF,A			
	CALL	F_SENDWORK		;SEND WRITE CODE AND PAGE
	CALL	F_CHKACK
	B0BTS0	I2C_ERROR
	JMP	F_EEPROMERROR
	MOV	A,LINGMINGDU_VAL
	MOV	DATA_BUF,A
	CALL	F_SENDWORK		;SEND WRITE CODE AND PAGE
	CALL	F_CHKACK
	B0BTS0	I2C_ERROR
	JMP	F_EEPROMERROR
	CALL	F_STOPCODE
	INCMS	R_EEPROMMODE
	JMP		TOUCHPE
F_RANDLINGMINGDU:
	B0BSET	READ_FLAG
	MOV	A,#V_CM_LMD_ADR		;40H
	MOV	WR4,A			;µ÷½ÚÁéÃô¶ÈµØÖ·
	CALL	F_SENDSLAVEADDRESS
	CLR	DATA_BUF
	CALL	F_REVICEWORK		;20H  BIT4-BIT7=KEY9-K12  BIT0-BIT3=KEY5-KEY8
	CALL	F_SENDNOACK
	CALL	F_STOPCODE
	MOV		A,LINGMINGDU_VAL
	AND		A,#0FH
	XOR		A,DATA_BUF
	B0BTS1	FZ
	JMP		F_EEPROMERROR
	INCMS	R_EEPROMMODE
	JMP		TOUCHPE
F_READKEY:
	B0BSET	READ_FLAG
	MOV		A,#V_CM_KEYD_ADR	;20H	;°´¼üµØÖ·
	MOV		WR4,A			
	CALL	F_SENDSLAVEADDRESS
F_READKEYVAL:
	CLR	R_KEY_BUFL
;	CLR	R_KEY_BUFH
	CLR	DATA_BUF
	CALL	F_REVICEWORK		;20H  BIT4-BIT7=KEY9-K12  BIT0-BIT3=KEY5-KEY8
	MOV	A,DATA_BUF
	MOV	R_KEY_BUFL,A
	CALL	F_SENDNOACK
	CALL	F_STOPCODE
GET_KEYV:
	MOV		A,R_KEY_BUFL
	XOR		A,#00H	;8H
	BTS1	FZ
	JMP		GET_KEYV_IN
	INCMS	TOUCHNO_TM
	NOP
	MOV		A,TOUCHNO_TM
	SUB		A,#2
	BTS1	FC
	JMP		TOUCHPE
	BCLR	TOUCHON_F	
	JMP		TOUCHPE
		
GET_KEYV_IN:
	CLR		TOUCHNO_TM
	MOV		A,R_KEY_BUFL	
;	MOV		CM_RXD0,A
	BTS0	TOUCHON_F
	JMP		TOUCHPE	
	BSET	TOUCHON_F
	BSET	TKEYIN_F
	JMP		TOUCHPE

F_EEPROMERROR:
	CLR		R_EEPROMMODE
	CALL	F_STOPCODE
	JMP		TOUCHPE
;********************************		
F_SENDSLAVEADDRESS:
	B0BCLR	I2C_ERROR
	B0BSET	DATA_MODE
	CALL	F_STARTCODE
	MOV	A,#V_CM_DEVICE_ADR	;34H
	MOV	DATA_BUF,A		;I2C	µØÖ·
	B0BCLR	FC
	RLCM	DATA_BUF		;1=READ   0=WRITE
	CALL	F_SENDWORK		;SEND WRITE CODE AND PAGE
	CALL	F_CHKACK
	B0BTS0	I2C_ERROR
	JMP	F_EEPROMERROR
	MOV	A,WR4				;¶ÁÊý¾ÝµØÖ·
	MOV	DATA_BUF,A			
	CALL	F_SENDWORK		;SEND WRITE CODE AND PAGE
	CALL	F_CHKACK
	B0BTS0	I2C_ERROR
	JMP	F_EEPROMERROR
	CALL	F_STARTCODE
	MOV	A,#V_CM_DEVICE_ADR	;34H
	MOV	DATA_BUF,A			;I2C	µØÖ·
	B0BCLR	FC
	RLCM	DATA_BUF		;1=READ   0=WRITE
	B0BCLR	DATA_BUF.0
	B0BTS0	READ_FLAG
	B0BSET	DATA_BUF.0
	CALL	F_SENDWORK		;SEND WRITE CODE AND PAGE
	CALL	F_CHKACK
	B0BTS0	I2C_ERROR
	JMP	F_EEPROMERROR
	RET
;========================================
F_STARTCODE:
;	B0BCLR	CLOCK
	B0BSET	DATA_MODE	
	CALL	F_DELAY
	B0BSET	DATA
	CALL	F_DELAY
	B0BSET	CLOCK
	NOP
	CALL	F_DELAY
	B0BCLR	DATA
	CALL	F_DELAY
	CALL	F_DELAY
	CALL	F_DELAY
	B0BCLR	CLOCK
	CALL	F_DELAY
	RET
;==============================================
F_STOPCODE:
	B0BCLR	CLOCK
	CALL		F_DELAY
	B0BSET	DATA_MODE
	B0BCLR	DATA
	CALL		F_DELAY
	B0BSET	CLOCK
	CALL	F_DELAY
	B0BSET	DATA
	CALL	F_DELAY
	NOP
	NOP
	B0BSET	CLOCK
	RET
;================================================
F_CHKACK:
	B0BCLR	I2C_ERROR
	B0BCLR	CLOCK
	B0BSET	DATA
	B0BCLR	DATA_MODE
	CALL	F_DELAY32US
	B0BSET	CLOCK
	CALL	F_DELAY
	CALL	F_DELAY
	MOV		A,#10
	MOV		WR0,A
F_WAITACK:
	B0BTS1	DATA
	JMP			$+4
	DECMS	WR0
	JMP		F_WAITACK
	B0BSET	I2C_ERROR
	B0BCLR	CLOCK
	CALL	F_DELAY
	B0BCLR	DATA
	B0BSET	DATA_MODE
	B0BCLR	DATA
	B0BTS0	I2C_ERROR
	RET
	CALL	F_DELAY32US
	RET
;================================================
F_SENDACK:
	B0BCLR	CLOCK
	CALL	F_DELAY
	B0BSET	DATA_MODE
	B0BCLR	DATA
	CALL	F_DELAY
	B0BSET	CLOCK
	CALL	F_DELAY
	B0BCLR	CLOCK
	B0BCLR	DATA
	NOP
	B0BCLR	DATA
	RET
F_SENDNOACK:
	B0BCLR	CLOCK
	CALL	F_DELAY
	B0BSET	DATA_MODE
	B0BSET	DATA
	CALL	F_DELAY
	B0BSET	CLOCK
	CALL	F_DELAY
	CALL	F_DELAY
	B0BCLR	CLOCK
	CALL	F_DELAY
	B0BCLR	DATA
	RET
;================================================
;================================================
F_SENDWORK:
	B0BSET	DATA_MODE		;SET DATA OUTPUT
	NOP
	MOV	A,#08H
	MOV	WR1,A
F_SENDLOOP:
	B0BCLR	CLOCK
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	B0BCLR	DATA
	B0BCLR	FC
	RLCM	DATA_BUF
	B0BTS0	FC
	B0BSET	DATA
	CALL	F_DELAY
	B0BSET	CLOCK
	CALL	F_DELAY
	B0BCLR	CLOCK
	DECMS	WR1
	JMP	F_SENDLOOP
	RET
;=============================================
F_REVICEWORK:
	B0BCLR	DATA_MODE
	CALL	F_DELAY
	MOV	A,#8
	MOV	WR1,A
F_REVICELOOP:
	B0BCLR	FC
	RLCM	DATA_BUF
	B0BCLR	CLOCK
	CALL	F_DELAY
	B0BSET	CLOCK
	CALL	F_DELAY
	B0BTS0	DATA
	B0BSET	DATA_BUF.0
	DECMS	WR1
	JMP	F_REVICELOOP
	B0BCLR	CLOCK
	CALL	F_DELAY
;	CALL	F_DELAY
	B0BCLR	DATA
	B0BSET	DATA_MODE
	B0BCLR	DATA
	CALL	F_DELAY
	RET
;=============================================
;==============================================
F_DELAY:
	MOV	A,#5
	MOV	WR0,A
F_DELAYWAIT:
	DECMS	WR0
	JMP	F_DELAYWAIT
	RET
;===============================================
;===============================================
F_DELAY32US:
	MOV	A,#20
	MOV	WR0,A
F_DELAY32USWAIT:
	DECMS	WR0
	JMP	F_DELAY32USWAIT
	RET
;**************************	
KEYP:
	BTS1	TKEYIN_F
	JMP	KEYP01	
	BCLR	TKEYIN_F
	CLR	KP_TM	
	BCLR	KP3S_F		
	MOV		A,R_KEY_BUFL	;CM_RXD0		;KEYV_OLD
	XOR		A,#04H		
	BTS0	FZ
	JMP		KEYP_ONFK
	MOV		A,R_KEY_BUFL	;CM_RXD0
	XOR		A,#02H
	BTS0	FZ
	JMP		KEYP_POWERK
	MOV		A,R_KEY_BUFL	;CM_RXD0
	XOR		A,#01H
	BTS0	FZ
	JMP		KEYP_TMK	;KEYP_ECOK
	MOV		A,R_KEY_BUFL	;CM_RXD0
	XOR		A,#80H
	BTS0	FZ
	JMP		KEYP_ECOK	;KEYP_TMK
	RET
KEYP01:	
	BTS1	TOUCHON_F
	JMP	KEYP02
	BTS1	ONFKRELAX_F
	JMP	KEYP011
	MOV	A,R_KEY_BUFL	;CM_RXD0		;KEYV_OLD
	XOR	A,#04H		
	BTS1	FZ
	RET
	MOV	A,ONF
	BTS0	FZ
	RET
	BTS0	KP3S_F
	RET
	INCMS	KP_TM
	NOP
	MOV	A,KP_TM
	SUB	A,#250
	BTS1	FC
	RET
	BSET	KP3S_F
	JMP	KEYP_DP2OFFP
KEYP011:
	MOV	A,R_KEY_BUFL	;CM_RXD0
	XOR	A,#80H
	BTS1	FZ
	RET
	MOV	A,ONF
	BTS1	FZ
	RET
	BTS0	KP3S_F
	RET
	INCMS	KP_TM
	NOP
	MOV	A,KP_TM
	SUB	A,#250
	BTS1	FC
	RET
	BSET	KP3S_F
	BSET	PEIDUI_F
	JMP	KEYP_BZPM1		
KEYP02:
	BTS1	ONFKRELAX_F
	RET
	BCLR	ONFKRELAX_F
	BTS1	KP3S_F
	JMP	KEYP_ONFK02
	BCLR	KP3S_F
	RET
		
KEYP_ONFK:
;	CLR	DSTM_STEP
;	CLR	YYTM_STEP
	MOV	A,ONF
	BTS1	FZ
	JMP	KEYP_ONFK01
	BSET	KP3S_F
	TMCLRP
	JMP	KEYP_2ONP	
KEYP_ONFK01:	
	BTS0	DPOFF_F
	JMP	KEYP_DP2ONP	
	CLR	KP_TM
	BCLR	KP3S_F
	BSET	ONFKRELAX_F
	RET
KEYP_ONFK02:
	MOV	A,ONF
	SUB	A,#2
	BTS0	FC
	JMP	KEYP_ONFK1
KEYP_2ONP:	
KEYP_TOON_YY:	
;	BSET	ONF_F		;TO ON
;	TMCLRP
	CLR	TM_1MIN
;	CLR	YYTM_STEP
;	BCLR	SETTM_F
;	CLR	DP_MODE
;	CLR	DP_SET_MODE
	BCLR	DPOFF_F
	MOV	A,#2
	MOV	ONF,A
	JMP	KEYP_ONBZP
KEYP_ONFK1:
KEYP_2OFFP:
KEYP_TOOFF_TM:	
;	BCLR	ONF_F		;TO OFF
;	CLR	DSTM_STEP
;	CLR	YYTM_STEP
;	BCLR	SETTM_F
;	CLR	DP_MODE
;	CLR	DP_SET_MODE
	TMCLRP
	CLR	ONF
	CLR	MODE
	BCLR	DPOFF_F
;	CLR	OUTP_MODE
;	BCLR	AIONF_F
;	BCLR	POWERHL_F
	CLR	SPEED
	JMP	KEYP_OFFBZP
KEYP_POWERK:
	BTS0	DPOFF_F
	JMP	KEYP_DP2ONP	
	MOV	A,ONF
	BTS0	FZ
	RET	
KEYP_POWERK1:
	MOV	A,MODE
	BTS1	FZ
	RET			;JMP	KEYP_POWERK_ECOP
	INCMS	SPEED
	NOP
	MOV	A,SPEED
	SUB	A,#3
	BTS0	FC
	CLR	SPEED
	JMP	KEYP_BZPM1	
	
KEYP_ECOK:
	BTS0	DPOFF_F
	JMP	KEYP_DP2ONP	
	MOV	A,ONF
	BTS0	FZ
	RET	
	BCLR	TEMPUPDN_F
	MOV	A,MODE
	SUB	A,#1
	BTS0	FC
	JMP	KEYP_ECOK1
	MOV	A,#1
	MOV	MODE,A	
	JMP	KEYP_BZPM1
KEYP_ECOK1:
	INCMS	MODE
	NOP
	MOV	A,MODE
	SUB	A,#4
	BTS0	FC
	CLR	MODE	
	JMP	KEYP_BZPM1
KEYP_TMK:
	CLR	TM_1MIN
	MOV	A,ONF
	SUB	A,#2
	BTS1	FC
	JMP	KEYP_TMK_OFF
KEYP_TMK_ON:	
KEYP_DSK:
	BTS0	DPOFF_F
	JMP	KEYP_DP2ONP	
;	TMCLRP	
	INCMS	TM_HOUR2OFF
	NOP
	MOV	A,TM_MIN2OFF
	BTS0	FZ
	JMP	KEYP_DSK1
	INCMS	TM_HOUR2OFF
	NOP	
KEYP_DSK1:	
	CALL	DS_TMCLRP_CHK
	MOV	A,TM_HOUR2OFF
	SUB	A,#16
	BTS1	FC
	JMP	KEYP_BZPM1		;KEYP_TMK1	
	CLR	TM_HOUR2OFF
/*	MOV	A,ONF
	XOR	A,#1
	BTS0	FZ
	CLR	ONF			;YY
*/	
	JMP		KEYP_BZPM1
KEYP_TMK_OFF:
KEYP_YYK:
	BTS0	DPOFF_F
	JMP	KEYP_DP2ONP	
;	CLR	TM_1MIN
;	CLR	TM_MIN2ON
	MOV	A,ONF
	BTS1	FZ
	JMP	KEYP_TMK_OFF1		;KEYP_BZPM1
	MOV	A,#1			;TO YY
	MOV	ONF,A	
	MOV	A,#1
	MOV	TM_HOUR2ON,A
	CALL	YY_TMCLRP_CHK
	JMP		KEYP_BZPM1
KEYP_TMK_OFF1:				;HAVE YY
	INCMS	TM_HOUR2ON
	NOP
	MOV	A,TM_MIN2ON
	BTS0	FZ
	JMP	KEYP_TMK_OFF11
	INCMS	TM_HOUR2ON
	NOP	
KEYP_TMK_OFF11:	
	CALL	YY_TMCLRP_CHK
	MOV	A,TM_HOUR2ON
	SUB	A,#16
	BTS1	FC
	JMP	KEYP_BZPM1		;KEYP_TMK1	
	CLR	TM_HOUR2ON
	CLR	ONF
	JMP	KEYP_BZPM1
		
KEYP_BZPM1:	
	MOV		A,#1
	MOV		BZ_MODE,A
KEYP_BZP:	
	CLR		BZ_TM
;	CLR		BZ_STEP	
;	CLR		KEYOFF_TM
	BSET	STATUSC_F
	BTS1	NOBZ_F
	RET
	BCLR	NOBZ_F
	CLR	BZ_MODE
	RET
KEYP_ONBZP:
	MOV		A,#2
	MOV		BZ_MODE,A
	BCLR	DPOFF_F
	JMP	KEYP_BZP
KEYP_OFFBZP:
	MOV		A,#3
	MOV		BZ_MODE,A
	BCLR	DPOFF_F
	JMP	KEYP_BZP
KEYP_DP2ONP:
	BCLR	DPOFF_F
	JMP	KEYP_BZPM1
KEYP_DP2OFFP:
	BSET	DPOFF_F
	JMP	KEYP_BZPM1
;**************************	
DS_TMCLRP_CHK:
	MOV	A,ONF
	SUB	A,#2
	BTS1	FC
	RET
	CLR	TM_1MIN
	CLR	TM_MIN2OFF
	RET	
;**************************	
YY_TMCLRP_CHK:
	MOV	A,ONF
	SUB	A,#2
	BTS0	FC
	RET
	CLR	TM_1MIN
	CLR	TM_MIN2ON
	RET	
;**************************	
RXD_DS_TMCLRP_CHK:
	MOV	A,ONF
	SUB	A,#2
	BTS1	FC
	RET
	CLR	TM_1MIN
;	CLR	TM_MIN2OFF
	RET	
;**************************	
RXD_YY_TMCLRP_CHK:
	MOV	A,ONF
	SUB	A,#2
	BTS0	FC
	RET
	CLR	TM_1MIN
;	CLR	TM_MIN2ON
	RET	
	
;**************************	
OUTP:
	INCMS	OUTP_TM
	NOP
	MOV	A,OUTP_TM
	SUB	A,#250
	BTS1	FC
	JMP	OUTP1
	MOV	A,#252
	MOV	OUTP_TM,A
OUTP1:	
	MOV	A,OUTP_TM
	SUB	A,#10
	BTS1	FC
	RET
	MOV	A,ONF
	XOR	A,#2
	BTS0	FZ
	JMP	OUTP_ON
OUTP_OFF:	
	BTS1	HT1_B
	JMP	OUTP_OFF1
	BCLR	HT1_B
	CLR	OUTP_TM
	RET
OUTP_OFF1:
	BCLR	HT1_B
	BTS0	HT2_B
	CLR	OUTP_TM
	BCLR	HT2_B
	RET
OUTP_ON:
	BTS0	FLVD24
	JMP	OUTP_OFF	
	BTS0	CWBH_F
	JMP	OUTP_OFF
	MOV	A,MODE
	BTS1	FZ
	JMP	OUTP_ONAUTO
	MOV	A,SPEED
	MOV	SPEED_OUT,A
	JMP	OUTP_ONS
OUTP_ONAUTO:
	MOV	A,SPEED_AUTO
	MOV	SPEED_OUT,A	
OUTP_ONS:
	MOV	A,SPEED_OUT
	SUB	A,#3
	BTS0	FC
	JMP	OUTP_OFF
	MOV	A,SPEED_OUT
	@JMP_A	3
	JMP	OUTP_ONSL		
	JMP	OUTP_ONSM		
	JMP	OUTP_ONSH		
	RET	
OUTP_ONSL:
	BTS0	HT2_B
	JMP	OUTP_DELAYP
	BTS1	HT1_B
	CLR	OUTP_TM
	BSET	HT1_B
	RET	
OUTP_ONSM:
	BTS0	HT1_B
	JMP	OUTP_DELAYP
	BTS1	HT2_B
	CLR	OUTP_TM
	BSET	HT2_B
	RET	

OUTP_ONSH:
	BTS0	HT2_B
	JMP	OUTP_ONSH1
	BSET	HT2_B
	CLR	OUTP_TM
	RET
OUTP_ONSH1:
	BTS1	HT1_B
	CLR	OUTP_TM
	BSET	HT1_B
	RET	
OUTP_DELAYP:
	CLR	OUTP_TM
	JMP	OUTP_OFF		
;*************************************	
;************************
TM1SP:
	INCMS	TM_10MS
	NOP
	MOV		A,TM_10MS
	SUB		A,#80
	BTS1	FC
	RET
	CLR		TM_10MS
	INCMS	TM_1S
	NOP
	MOV		A,TM_1S
	SUB		A,#102
	BTS1	FC		
	RET
	CLR		TM_1S
	BSET	DS_TM1S_F
	BSET	TXDTM1S_F	
;	BSET	NAT_TM1S_F	
;	BSET	SLP_TM1S_F	
	BSET	CHKSPACE_TM1S_F
;	BSET	BTNOCN_TM1S_F
	RET
;************************
TM_DNP:
	BTS1	DS_TM1S_F
	RET	
	BCLR	DS_TM1S_F
	mov	a,#04h
	xor	p1,a
	INCMS	TM_1MIN
	NOP
	MOV		A,TM_1MIN
	SUB		A,#V_TM1MIN		;60
	BTS1	FC
	RET
	CLR		TM_1MIN
;	BTS1	ONF_F
	MOV	A,ONF
	SUB	A,#2
	BTS1	FC
	JMP		TM_DNP2ONP
TM_DNP2OFFP:			;ON
	BTS1	TM2OFFE0_F			;/=0
	RET
	MOV		A,TM_MIN2OFF
	BTS0	FZ
	JMP		TM_DNP2OFFP2
	DECMS	TM_MIN2OFF
	RET
	MOV	A,TM_HOUR2OFF
	BTS1	FZ
	RET
	BSET	NOBZ_F
	JMP	KEYP_TOOFF_TM	
TM_DNP2OFFP2:					;MIN=0
	MOV	A,#59
	MOV	TM_MIN2OFF,A
	DECM	TM_HOUR2OFF
	RET
TM_DNP2ONP:
	BTS1	TM2ONE0_F			;/=0
	RET
	MOV		A,TM_MIN2ON
	BTS0	FZ
	JMP		TM_DNP2ONP2
	DECMS	TM_MIN2ON
	RET
	MOV		A,TM_HOUR2ON
	BTS1	FZ
	RET
	JMP		KEYP_TOON_YY
TM_DNP2ONP2:					;MIN=0
	MOV	A,#59
	MOV	TM_MIN2ON,A
	DECM	TM_HOUR2ON	
	RET
	
;**************************	
	
;**************************	
IR_PROCESS:
;	BTS0	IRK_B		;RELAX.
;	JMP		IRP_PRESS		;RET
       BTS1		FINISH_F		;CHECKING FINISH
        RET
        BCLR     FINISH_F
;	CLR	ADP_CNT
	MOV	A,DATAH2
	CMPRS	A,DATAH3
	JMP	IRPE		;/= ,ERROR
	MOV	A,DATAL2
	CMPRS	A,DATAL3
	JMP	IRPE		;/= ,ERROR	
IR_PROCESS0:
	MOV	A,DATAH2
	XOR	A,#0X00
	BTS1	FZ		;
	JMP	IRPE		;/= ,ERROR	
	CLR	IRPRESS_TM
	MOV	A,DATAL2
	MOV	IR_DATAL_BUF,A
	MOV	A,DATAL2
	XOR	A,#0XBF
	BTS1	FZ		;
	JMP	IR_P1
	BSET	IRK_B
	JMP	KEYP_ONFK
IR_P1:	
	MOV	A,DATAL2
	XOR	A,#0XBE
	BTS1	FZ		;
	JMP	IR_P11
	BSET	IRK_B
	JMP	KEYP_POWERK
IR_P11:		
	MOV	A,DATAL2
	XOR	A,#0XBD
	BTS1	FZ		
	JMP	IR_P12
	BSET	IRK_B
;	BTS0	ONF_F	
	MOV	A,ONF
	XOR	A,#2
	BTS0	FZ
	JMP	IRPE			;KEYP_TMK
	JMP	KEYP_YYK
IR_P12:	
	MOV	A,DATAL2
	XOR	A,#0XBB
	BTS1	FZ		
	JMP	IR_P13
	BSET	IRK_B
	MOV	A,ONF
	XOR	A,#2
	BTS1	FZ	
	JMP	IRPE			;KEYP_TMK
	JMP	KEYP_DSK
IR_P13:	
IR_P16:	
	MOV	A,DATAL2
	XOR	A,#0XB7
	BTS1	FZ			
	JMP	IR_P17
	BSET	IRK_B
	JMP	KEYP_ECOK
IR_P17:	
	MOV	A,DATAL2
	XOR	A,#0XAF
	BTS1	FZ			
	JMP	IR_P18
	BSET	IRK_B
;	BCLR	TMSET_F
;	CLR	DP_MODE
	MOV	A,ONF
	BTS0	FZ
	JMP	IRPE
	BTS0	DPOFF_F
	JMP	KEYP_DP2ONP
;	BSET	DPOFF_F
	JMP	KEYP_DP2OFFP
IR_P171:
	BCLR	DPOFF_F
IR_P172:	
	CALL	KEYP_BZPM1
	RET	
IR_P18:


IRPE:
	RET	  
/*IRP_PRESS:
	INCMS	IRPRESS_TM
	NOP
	MOV		A,IRPRESS_TM
	SUB		A,#120
	BTS1	FC
	JMP		IRPE
	MOV		A,#100
	MOV		IRPRESS_TM,A
	BSET	NOBZ_F
	MOV		A,IR_DATAL_BUF
	XOR		A,#0X1E
	BTS0	FZ		
	JMP		KEYP_UPK
	MOV		A,IR_DATAL_BUF
	XOR		A,#0X3E
	BTS0	FZ			
	JMP		KEYP_SPK
	MOV		A,IR_DATAL_BUF
	XOR		A,#0X1C
	BTS0	FZ		
	JMP		KEYP_DNK
	JMP		IRPE
*/
	RET		
;*******************************************	
ADP:	
     MOV		A,CHKSPACE_TMNS
     SUB		A,#1	;5		;30
     BTS1		FC
	RET
ADP_CHK:
	BTS0	AD_SEL.0
	JMP	ADP_CHK_BH
ADP_CHK_TEMP:	
	MOV	A,#1BH
	MOV	ADM,A	
	JMP	ADP_CHKP1
ADP_CHK_BH:
	MOV	A,#11H
	MOV	ADM,A	
	JMP	ADP_CHKP1	
ADP_CHKP1:	
	BCLR	FEOC		
	BSET	FADENB
	CALL	DELAY_200US
	BSET	FADS
AD_CHKP2:	
	BTS1	FEOC
	JMP		AD_CHKP2
	BCLR	FEOC
	INCMS	ADCHK_CNT
	NOP
	MOV		A,ADCHK_CNT
	XOR		A,#1
	BTS1	FZ
	JMP		AD_CHKP21	
	MOV		A,ADB
	MOV		AD_DATAH,A	
	RET
AD_CHKP21:
	MOV		A,ADB
	ADD		AD_DATAH,A
	RRCM	AD_DATAH
	MOV		A,ADCHK_CNT
	SUB		A,#8
	BTS1	FC
	RET
	BTS0	AD_SEL.0
	JMP	AD_GET_BHT
ADP_GET_TEMP:	
	CLR		CHK_TEMP_BUF
ADP_GET_TEMP1:	
	B0MOV	Y,#TEMP_TABLE1$M
	B0MOV	Z,#TEMP_TABLE1$L
	MOV		A,CHK_TEMP_BUF	
;	B0ADD	Z,A
;	MOVC	
	MOVCMP
	MOV		DATA_BUF,A
	MOV		A,AD_DATAH
	SUB		A,DATA_BUF
	BTS1	FC
	JMP		ADP_GET_TEMP2
	BTS0	FZ
	JMP		ADP_GET_TEMP2
	INCMS	CHK_TEMP_BUF		;>
	NOP
	JMP		ADP_GET_TEMP1	
ADP_GET_TEMP2:	
	MOV		A,CHK_TEMP_BUF
	XOR	A,#0
	BTS1	FZ
	JMP	ADP_GET_TEMP21
ADP_GET_TEMP_OPEN:
	BSET	TEMPSSOPEN_F
;	BSET	TEMPSSERR_F
	MOV	A,#99
	MOV	TEMP_CHK,A
	BSET	TEMP_CHK.7			;LT 0	
	JMP	ADP_GET_TEMP_SHORT1	
ADP_GET_TEMP21:
	MOV	A,CHK_TEMP_BUF
	XOR	A,#62
	BTS1	FZ
	JMP	ADP_GET_TEMP22
ADP_GET_TEMP_SHORT:
	BSET	TEMPSSSHORT_F
	MOV	A,#99
	MOV	TEMP_CHK,A
ADP_GET_TEMP_SHORT1:
	BTS0	TEMPSSERR_F
	JMP	ADPE					
	BSET	TEMPSSERR_F
;	BTS0	ONF_F
;	CALL	KEYP_TOOFF
	JMP	ADPE			
ADP_GET_TEMP22:
	BCLR	TEMPSSSHORT_F
	BCLR	TEMPSSERR_F
	BCLR	TEMPSSOPEN_F
	DECM	CHK_TEMP_BUF
	NOP
	MOV	A,CHK_TEMP_BUF
	SUB	A,#2
	BTS1	FC
	JMP	ADP_GET_TEMP23	
	MOV	CHK_TEMP_BUF,A
ADP_GET_TEMP23:	
	MOV		A,CHK_TEMP_BUF
	SUB		A,#10
	BTS0	FC
	JMP		ADP_GET_TEMP_GT0
ADP_GET_TEMP_LT0:	
	MOV		A,#10
	SUB		A,CHK_TEMP_BUF
	MOV		TEMP_CHK,A
	BSET	TEMP_CHK.7			;LT 0
	JMP		ADPE		
ADP_GET_TEMP_GT0:	
	MOV		A,CHK_TEMP_BUF
	SUB		A,#10
	MOV		TEMP_CHK,A
	JMP		ADPE	
AD_GET_BHT:
	CLR		CHK_TEMP_BUF
AD_GET_BHT1:	
	B0MOV	Y,#BHT_TABLE1$M
	B0MOV	Z,#BHT_TABLE1$L
	MOV	A,CHK_TEMP_BUF	
;	B0ADD	Z,A
;	MOVC	
	MOVCMP
	MOV		DATA_BUF,A
	MOV		A,AD_DATAH
	SUB		A,DATA_BUF
	BTS1	FC
	JMP		AD_GET_BHT2
	BTS0	FZ
	JMP		AD_GET_BHT2
	INCMS	CHK_TEMP_BUF
	NOP
	JMP		AD_GET_BHT1	
AD_GET_BHT2:	
	MOV	A,CHK_TEMP_BUF
	XOR	A,#0
	BTS1	FZ
	JMP	AD_GET_BHT3
	BCLR	CWBH_F
	JMP	ADPE
AD_GET_BHT3:
	MOV	A,CHK_TEMP_BUF
	SUB	A,#2
	BTS1	FC
	JMP	ADPE
	BSET	CWBH_F
	JMP	ADPE	
ADPE:	
	CLR		CHKSPACE_TMNS
	CLR		ADCHK_CNT
	INCMS	AD_SEL
	NOP
	MOV	A,AD_SEL
	SUB	A,#2
	BTS0	FC
	CLR	AD_SEL	
	RET	
;*******************************
HEX2DECP:
	MOV		A,HEXD
	MOV		DECD,A
/*	MOV		A,DP_MODE
	XOR		A,#1
	BTS0	FZ
*/
	BTS0	HEXGT100_F
	JMP		HEX2DECP1
	MOV		A,HEXD
	SUB		A,#100		;50
	BTS0	FC
	RET
HEX2DECP1:	
	CLR		DECD
	CLR		DATA_BUF
HEX2DECP2:		
	MOV		A,HEXD
	SUB		A,#0AH
	BTS1	FC
	JMP		HEX2DECP3
	MOV		HEXD,A	
	MOV		A,#10H
	ADD		DECD,A
	MOV		A,DECD
	AND		A,#0F0H
	SUB		A,#0A0H
	BTS1	FC
	JMP		HEX2DECP2
	CLR		DECD	
	MOV		A,#1
	ADD		DATA_BUF,A
	JMP		HEX2DECP2
HEX2DECP3:	
	MOV		A,HEXD
	ADD		DECD,A
/*	MOV		A,DP_MODE
	XOR		A,#0
	BTS0	FZ
	RET
	MOV		A,DATA_BUF
	BTS0	FZ
	RET
	SWAPM	DECD
	MOV		A,#0FH
	AND		DECD,A
	SWAP	DATA_BUF
	AND		A,#0F0H
	OR		DECD,A
*/
	RET
;***********************************	
;**************************	
;**************************	
;**************************************	
LEDP:							;10MS
	BCLR	TX1628D_F
	BSET	LEDSTB_B
	BSET	LEDCLK_B
	BSET	LEDDATA_B
	INCMS	LEDP_CNT
	NOP
	MOV		A,LEDP_CNT
	SUB		A,#10
	BTS1	FC
	JMP		LEDP_RET
	CLR		LEDP_CNT			;100MS
LEDP003:		
	INCMS	LEDFLASH_TM
	NOP
	MOV		A,LEDFLASH_TM
	SUB		A,#5
	BTS1	FC
	JMP		LEDP01
	CLR		LEDFLASH_TM			;0.5S
	INCMS	LEDFLASH_STEP
	NOP
	MOV	A,LEDFLASH_STEP
	SUB	A,#2
	BTS0	FC
	BCLR	DPALLON_F
LEDP01:	
	MOV		A,#00H					;00H(4DIG);03H(7GR);02H(6GR)
	MOV		COMMAND_MODE,A		;
	MOV		A,#40H
	MOV		COMMAND_DATA,A
	MOV		A,#0C0H
	MOV		COMMAND_ADDRESS,A		;FROM 00H,DIG1
LEDP1:	
	MOV		A,COMMAND_MODE
	MOV		COMMAND_BUF,A
	CALL	LEDP_TXP
LEDP2:	
	BSET	LEDSTB_B
	BSET	LEDCLK_B
	CALL	LEDP_DELAYP
	CALL	LEDP_DELAYP
	MOV		A,COMMAND_DATA
	MOV		COMMAND_BUF,A
	CALL	LEDP_TXP
LEDP3:	
	BSET	LEDSTB_B
	BSET	LEDCLK_B
	CALL	LEDP_DELAYP
	CALL	LEDP_DELAYP
	MOV		A,COMMAND_ADDRESS
	MOV		COMMAND_BUF,A
	CALL	LEDP_TXP
LEDP4:
	BSET	LEDCLK_B
	CALL	LEDP_DELAYP
	CALL	LEDP_DELAYP
LEDP_S00H:						
	BSET	TX1628D_F
	CLR		COMMAND_BUF	
	MOV	A,ONF
	BTS0	FZ
	JMP	LEDP_S00HE
	CLR		DATA_BUF
	CALL	GET_TMDIG
	MOV		A,TM_DIG
	MOV		HEXD,A
LEDP_S00H1:			
	CALL	HEX2DECP
	MOV		A,DECD
	MOV		TM_DIG,A
	MOV	A,TM_DIG
	BTS1	FZ
	JMP	LEDP_S00H10
	MOV	A,#0AAH
	MOV	TM_DIG,A
LEDP_S00H10:					
	B0MOV	Y,#LCD_TABLE1$M
	B0MOV	Z,#LCD_TABLE1$L
	SWAP	TM_DIG
	AND		A,#0FH
;	B0ADD	Z,A
;	MOVC	
	MOVCMP
	MOV	DATA_BUF,A	
	CALL	GET_DP_DATA	
	MOV	A,TM_DIG
	XOR	A,#0AAH
	BTS1	FZ
	BSET	COMMAND_BUF.7			;DP TM "H"		
LEDP_S00HE:
;	mov		a,test_data
;	mov		COMMAND_BUF,a
	CALL	LEDP_TXP

LEDP_S01H:						
	CLR		COMMAND_BUF	
	MOV	A,ONF
	BTS0	FZ
	JMP	LEDP_S01HE
	MOV	A,TM_DIG
	XOR	A,#0AAH
	BTS0	FZ
	JMP	LEDP_S01HE
	MOV	A,ONF
	XOR	A,#1			;2
	BTS0	FZ
	BSET	COMMAND_BUF.0		;YY H2
LEDP_S01HE:
	CALL	LEDP_TXP
LEDP_S02H:				
	CLR		COMMAND_BUF
	MOV	A,ONF
	BTS0	FZ
	JMP	LEDP_S02HE
	CLR		DATA_BUF
LEDP_S02H0:				
	B0MOV	Y,#LCD_TABLE1$M
	B0MOV	Z,#LCD_TABLE1$L
	MOV		A,TM_DIG
	AND		A,#0FH
;	B0ADD	Z,A
;	MOVC	
	MOVCMP
	MOV		DATA_BUF,A	
	CALL	GET_DP_DATA	
	MOV	A,TM_DIG
	XOR	A,#0AAH
	BTS0	FZ
	JMP	LEDP_S02HE
	MOV	A,ONF
	XOR	A,#2			;1
	BTS0	FZ
	BSET	COMMAND_BUF.7		;DS H3
	JMP		LEDP_S02HE
LEDP_S02HE:
	CALL	LEDP_TXP
LEDP_S03H:						
	CLR	COMMAND_BUF
	BTS1	WIFIONF_F
	JMP	LEDP_S03H1
LEDP_S03H0:						
	BSET	COMMAND_BUF.0		;H4,WIFI 
	JMP	LEDP_S03HE
LEDP_S03H1:
	BTS1	LEDFLASH_STEP.0
	JMP	LEDP_S03H0		
LEDP_S03HE:
	CALL	LEDP_TXP
LEDP_S04H:						
	CLR		COMMAND_BUF	
	MOV	A,ONF
	BTS0	FZ
	JMP	LEDP_S04HE
	MOV		A,MODE
	XOR		A,#0
	BTS0	FZ
	JMP	LEDP_S04H1
	BSET	COMMAND_BUF.2		;AI H7
	BSET	COMMAND_BUF.3		;AI H7
	BSET	COMMAND_BUF.6		;AI SPL J1
	MOV	A,MODE
	SUB	A,#2
	BTS0	FC
	BSET	COMMAND_BUF.7		;AI SPM J2
	JMP	LEDP_S04H2
LEDP_S04H1:
	BSET	COMMAND_BUF.4		;MANUAL H8
	BSET	COMMAND_BUF.5		;MANUAL H8
	BSET	COMMAND_BUF.6		;SPL J1
	MOV	A,SPEED
	SUB	A,#1
	BTS0	FC
	BSET	COMMAND_BUF.7		;SPM J2	
LEDP_S04H2:	
LEDP_S04HE:
	CALL	LEDP_TXP
LEDP_S05H:						
	CLR		COMMAND_BUF	
	MOV	A,ONF
	BTS0	FZ
	JMP	LEDP_S05HE
	MOV		A,MODE
	BTS0	FZ
	JMP	LEDP_S05H1
	MOV	A,MODE
	SUB	A,#2
	BTS0	FC
	BSET	COMMAND_BUF.0		;AI SPM J3
	JMP	LEDP_S05H2
LEDP_S05H1:
	MOV	A,SPEED
	SUB	A,#1
	BTS0	FC
	BSET	COMMAND_BUF.0		;SPM J2		
LEDP_S05H2:	
LEDP_S05HE:
	CALL	LEDP_TXP	
LEDP_S06H:						
	CLR	COMMAND_BUF
	MOV	A,ONF
	BTS0	FZ
	JMP	LEDP_S06HE
	MOV		A,MODE
	BTS0	FZ
	JMP	LEDP_S06H1
	MOV	A,MODE
	SUB	A,#3
	BTS1	FC	
	JMP	LEDP_S06HE
LEDP_S06H0:	
	BSET	COMMAND_BUF.0			;AI HJ4	
	BSET	COMMAND_BUF.1			;J5	
	BSET	COMMAND_BUF.2			;J6	
	JMP	LEDP_S06HE
LEDP_S06H1:
	MOV	A,SPEED
	SUB	A,#2
	BTS1	FC
	JMP	LEDP_S06HE
	JMP	LEDP_S06H0	
LEDP_S06HE:
	CALL	LEDP_TXP
LEDP5:	
	BCLR	TX1628D_F
	BSET	LEDSTB_B
	BSET	LEDCLK_B
	CALL	LEDP_DELAYP
	CALL	LEDP_DELAYP
	MOV	A,#8FH		;8BH	;88H	;COMMAND_ADDRESS  ;8FH(ALL ON)
	MOV	COMMAND_BUF,A
/*	MOV	A,ONF
	BTS0	FZ
	JMP	LEDP5_DPOFF
*/	
	BTS1	DPOFF_F
	JMP		LEDP51
LEDP5_DPOFF:	
	MOV		A,#80H
	MOV		COMMAND_BUF,A		;OFF DP
LEDP51:	
	CALL	LEDP_TXP
	CALL	LEDP_DELAYP
	CALL	LEDP_DELAYP
	BSET	LEDSTB_B
	BSET	LEDCLK_B
	BSET	LEDDATA_B			
	JMP		LEDP_RET
LEDP52:						;
LEDP_RET:
	RET	
;**************************	
LEDP_TXP:
	BCLR	LEDSTB_B
	MOV		A,#8
	MOV		LEDTX_BIT,A
	BTS1	DPALLON_F
	JMP	LEDP_TXP10
	BTS1	TX1628D_F
	JMP	LEDP_TXP10
	MOV	A,#0FFH
	MOV	COMMAND_BUF,A	
LEDP_TXP10:	
	BCLR	LEDCLK_B
	RRCM	COMMAND_BUF	
	BTS0	FC
	JMP		LEDP_TXP11
	BCLR	LEDDATA_B
	JMP		LEDP_TXP12
LEDP_TXP11:
	BSET	LEDDATA_B
LEDP_TXP12:
	CALL	LEDP_DELAYP
	BSET	LEDCLK_B
	CALL	LEDP_DELAYP
	DECMS	LEDTX_BIT			
	JMP		LEDP_TXP10	
	RET
;**************************	
LEDP_DELAYP:
	NOP
	NOP
	NOP
	NOP
	RET
;**************************
GET_TMDIG:
	CLR		TM_DIG
	MOV		A,TM_MIN2OFF
	MOV		TM_MIN_BUF,A
	MOV		A,TM_HOUR2OFF
	MOV		TM_HOUR_BUF,A
	MOV		A,ONF	;DP_MODE
	XOR		A,#2
	BTS0	FZ
	JMP		GET_TMDIG1
	MOV		A,TM_MIN2ON
	MOV		TM_MIN_BUF,A
	MOV		A,TM_HOUR2ON
	MOV		TM_HOUR_BUF,A
GET_TMDIG1:
/*	MOV		A,TM_HOUR_BUF
	SUB		A,#9
	BTS1	FC
	JMP		GET_TMDIG2
	BTS1	FZ
	JMP		GET_TMDIG11
	MOV		A,TM_MIN_BUF
	SUB		A,#31
	BTS1	FC
	JMP		GET_TMDIG2
*/	
GET_TMDIG11:	
;	BCLR	DPTMDOT_F
	MOV		A,TM_HOUR_BUF
	MOV		TM_DIG,A
	MOV		A,TM_MIN_BUF
	BTS0	FZ
	RET
	INCM	TM_DIG
	RET
/*GET_TMDIG2:
	BSET	DPTMDOT_F
	SWAP	TM_HOUR_BUF
	AND		A,#0F0H
	MOV		TM_DIG,A
	
	MOV		A,TM_MIN_BUF
	SUB		A,#31
	BTS1	FC
	JMP		GET_TMDIG21
	MOV		A,#10H
	ADD		TM_DIG,A
	RET	
GET_TMDIG21:
	MOV		A,TM_MIN_BUF
	BTS0	FZ
	RET	
	MOV		A,#05H
	ADD		TM_DIG,A		
	RET
*/	
;**************************
GET_DP_DATA:
	BTS0	DATA_BUF.AA_B
	BSET	COMMAND_BUF.0
	BTS0	DATA_BUF.BB_B
	BSET	COMMAND_BUF.1
	BTS0	DATA_BUF.CC_B
	BSET	COMMAND_BUF.2
	BTS0	DATA_BUF.DD_B
	BSET	COMMAND_BUF.3
	BTS0	DATA_BUF.EE_B
	BSET	COMMAND_BUF.4	
	BTS0	DATA_BUF.FF_B
	BSET	COMMAND_BUF.5
	BTS0	DATA_BUF.GG_B
	BSET	COMMAND_BUF.6	
	RET	
;**************************	
AI_MODEP:
	MOV	A,MODE
	BTS0	FZ
	RET
	B0MOV	Y,#TEMP_SET_TABLE$M
	B0MOV	Z,#TEMP_SET_TABLE$L
	DEC	MODE
	AND	A,#0FH
;	B0ADD	Z,A
;	MOVC	
	MOVCMP
	MOV	DATA_BUF,A	
	BTS0	TEMPUPDN_F
	JMP	AI_MODEP_TDNP
AI_MODEP_TUPP:
	MOV	A,TEMP_CHK
	SUB	A,DATA_BUF
	BTS0	FC
	JMP	AI_MODEP_TUPP1
AI_MODEP_SPH:	
	MOV	A,#2
	MOV	SPEED_AUTO,A
	RET
AI_MODEP_TUPP1:
	MOV	A,TEMP_CHK
	SUB	A,DATA_BUF
	SUB	A,#2
	BTS0	FC
	JMP	AI_MODEP_TUPP2
AI_MODEP_SPL:	
	MOV	A,#0
	MOV	SPEED_AUTO,A
	RET
AI_MODEP_TUPP2:
	BSET	TEMPUPDN_F
AI_MODEP_SPOFF:	
	MOV	A,#3
	MOV	SPEED_AUTO,A
	RET					
AI_MODEP_TDNP:	
	MOV	A,TEMP_CHK
	SUB	A,DATA_BUF
	BTS0	FC
	JMP	AI_MODEP_SPOFF
	MOV	A,DATA_BUF	;SET
	SUB	A,TEMP_CHK
	SUB	A,#2
	BTS1	FC
	JMP	AI_MODEP_SPL
	BCLR	TEMPUPDN_F
	JMP	AI_MODEP_SPH
;**************************	
;1.4MS L + 300US H == 0
;500US L + 1.2MS H == 1
;**************************	
IR_CHK:						;250US
        MOV     A,PULSE
        SUB     A,#09H             ;5
        BTS0	FC		;PULSE<5
        JMP     ERROR1		;>=A
        MOV		A,PULSE
;   	B0ADD	PCL,A    
	@JMP_A	9
   	JMP		 PE1
   	JMP		 PE2
   	JMP		 PE3
   	JMP		 PE4
   	JMP		 PE1
   	JMP		 PE2
   	JMP		 PE3
   	JMP		 PE4
	JMP		PE9   	
PE1:                            ;WAIT START 7MS HIGH
;        MOV     A,P0
        BTS1     IRIN_B
        JMP     PE010
        INCMS     H_CNT1
;        NOP
        MOV		A,H_CNT1
        SUB		A,#100/2
	BTS1	FC
        RET			;<
        MOV		A,#100
        MOV		H_CNT1,A
	BTS1	IRK_B       
	RET
	BCLR	IRK_B        
	CLR	DATAL2
	CLR	DATAH2
;	CLR	DATAL3
;	CLR	DATAH3
;	CLR	DATA_STEP
        RET
PE2:                            ;DATA LOW PAUSE 500US OR 1.4MS
;        MOV     A,P0
        BTS0    IRIN_B
        JMP     PE020
        INCMS     L_CNT1
 ;       NOP
        MOV	A,L_CNT1
        SUB	A,#20/2
        BTS1	FC
        RET			;<
        MOV	A,#20/2
        MOV	L_CNT1,A
        RET
PE3:                            ;HIGH DATA
;        MOV     A,P0
	BTS1	IRIN_B
        JMP     PE030
        INCMS     H_CNT1
;        NOP
        MOV	A,H_CNT1
        SUB	A,#20/2
        BTS1	FC		;JBC	STATUS,C
        RET			;<=
        MOV	A,#20/2
        MOV	H_CNT1,A
        RET
PE4:                            ;WAIT 400US OR 1.4MS LOW PAUSE
 ;       MOV     A,P0
        BTS0	IRIN_B
        JMP     PE040
        INCMS     L_CNT1
;        NOP
        MOV	A,L_CNT1
        SUB	A,#20/2
        BTS1	FC		
        RET			;<=
        MOV	A,#20/2
        MOV	L_CNT1,A        
        RET
PE9:                            ;7MS HIGH,END
;        MOV     A,P0
        BTS1	IRIN_B
        JMP     ERROR1		;PE050
        INCMS     H_CNT1
        NOP
        MOV	A,H_CNT1
        SUB	A,#40/2
        BTS1	FC		;
        RET			;<=
	JMP	PEA

PE010:                          ;7MS H
	BTS0	IRK_B        
		JMP	ERROR1		
		MOV	A,H_CNT1
		SUB	A,#95/2
		BTS0	FC		;
       JMP	ERROR1			;>=
        INCMS     PULSE
;        NOP
        CLR     L_CNT1
        CLR     H_CNT1
        INCMS     L_CNT1
        NOP
        MOV     A,#11
        MOV     B_CNT1,A
	CLR	DATAL
	CLR	DATAH
	CLR	DATALP_CNT
        RET
PE020:                          ;DATA PULSE L
        MOV     A,L_CNT1
        SUB     A,#1
        BTS1	FC		;JBC     STATUS,0        ;>
        JMP     ERROR1
        MOV     A,L_CNT1
        SUB     A,#14/2            ;
        BTS0	FC		;JBS     STATUS,0        ;<
        JMP     ERROR1
        MOV	A,L_CNT1
        MOV	DATALP_CNT,A
        CLR     L_CNT1
        CLR     H_CNT1
        INCMS     H_CNT1
 ;       NOP
        INCMS     PULSE
;        NOP
        RET
PE030:                          ;CHK DATA H
        MOV     A,H_CNT1
        SUB     A,#1
        BTS1	FC		;JBC     STATUS,0        ;>
        JMP     ERROR1           ;<=
        MOV     A,H_CNT1
        SUB     A,#6/2
        BTS1	FC		;JBC     STATUS,0        ;>5
        JMP     PE035           ;<=5
;        MOV     A,H_CNT1
 ;       SUB     A,#9/2
  ;      BTS1	FC		;JBC     STATUS,0        ;>
   ;     JMP	ERROR1
        MOV     A,H_CNT1
        SUB     A,#14/2
        BTS0	FC		;JBS     STATUS,0        ;<=
        JMP	ERROR1		;>16
PE036:				;H 8-16 ,CHK L
        MOV		A,DATALP_CNT
        SUB		A,#4		;5/2
        BTS0	FC		;JBS	STATUS,C 
        JMP	ERROR1
        BSET	HL_F	;AS "1"
        JMP	PE037
PE035:				;H 1-5 ,CHK L
        MOV		A,DATALP_CNT
        SUB		A,#3		;9/2
        BTS1	FC	;JBC	STATUS,C 
        JMP	ERROR1		;<=
        BCLR	HL_F	;AS "0"
        JMP	PE037
PE037:
	BSET	FC		;BS	STATUS,0
	BTS1	HL_F	;JBS	FLAG_HL.0	        
	BCLR	FC		;BC	STATUS,0
	RLCM	DATAL
	RLCM	DATAH   
        CLR     L_CNT1
        CLR     H_CNT1
        INCMS     L_CNT1
 ;       NOP        
	DECMS	B_CNT1		;DJZ	B_CNT1
	JMP	PE038
;	JMP	PE6	
        INCMS     PULSE
        NOP
	RET     
PE038:
	DECMS	PULSE		;CHK NEXT BIT
	NOP
	RET        

PE040:                          ;400US L
        MOV     A,L_CNT1
        SUB     A,#1
        BTS1	FC		;JBC     STATUS,0        ;
        JMP     ERROR1
        MOV     A,L_CNT1
        SUB     A,#8		;15/2            ;5
        BTS0	FC		;JBS     STATUS,0        ;<=
        JMP     ERROR1
        MOV	A,L_CNT1
        MOV	DATALP_CNT,A
        MOV	A,DATAL
        XOR	A,#0X3F
        BTS0	FZ
        JMP	PE043			;=
        MOV	A,DATAL
        XOR	A,#0X1E
        BTS0	FZ
        JMP	PE043			;=
        MOV	A,DATAL
        XOR	A,#0XBF
        BTS0	FZ
        JMP	PE043			;=
        MOV	A,DATAL
        XOR	A,#0X9E
        BTS0	FZ
        JMP	PE043			;=
        MOV	A,DATAL
        XOR	A,#0X7F
        BTS0	FZ
        JMP	PE043			;=
        MOV	A,DATAL
        XOR	A,#0X5E
        BTS0	FZ
        JMP	PE043			;=
        MOV	A,DATAL
        XOR	A,#0XFF
        BTS0	FZ
        JMP	PE043			;=
        MOV	A,DATAL
        XOR	A,#0XDE
        BTS1	FZ
        JMP	PE041			;/=                
PE043:
        MOV	A,DATALP_CNT
        SUB     A,#8/2           ;
        BTS1	FC
        JMP	ERROR1		;<
PE042:
        CLR     L_CNT1
        CLR     H_CNT1
        INCMS     H_CNT1
;        NOP
        INCMS     PULSE
;        NOP
	MOV	A,PULSE
	CMPRS	A,#4
	JMP	PE0421
 	MOV	A,DATAL
	MOV	DATAL2,A
	MOV	A,DATAH
	MOV	DATAH2,A
        RET
PE0421:
 	MOV	A,DATAL
	MOV	DATAL3,A
	MOV	A,DATAH
	MOV	DATAH3,A
        RET
PE041:
        MOV	A,DATALP_CNT
        SUB     A,#8/2           ;
        BTS0	FC
        JMP	ERROR1		;>
	JMP	PE042        
PEA:  
        CLR     L_CNT1
        CLR     H_CNT1
	CLR	PULSE
	BSET	FINISH_F
ERROR1:	
        CLR     L_CNT1
        CLR     H_CNT1
        CLR     PULSE
        RET
;**************************
	
;**************************	
BCD2HEXDP:
	MOV		A,HEXD
	MOV		DECD,A
	SWAP	HEXD
	AND		A,#0FH
	MOV		DATA_BUF,A
BCD2HEXDP1:
	MOV		A,DATA_BUF
	BTS0	FZ
	RET
	MOV		A,DECD
	SUB		A,#6
	MOV		DECD,A
	DECMS	DATA_BUF
	NOP
	JMP		BCD2HEXDP1
;**************************	
;***********************************************
DELYA_5US:
	MOV		A,#5
	MOV		DEL_CNT,A
DELAY1:
	NOP
	NOP
	DECMS	DEL_CNT
	JMP		DELAY1
	RET	
DELAY_50US:
	MOV		A,#50
	MOV		DEL_CNT,A
	JMP		DELAY1
DELAY_200US:
		MOV		A,#200
		MOV		DEL_CNT,A
		JMP		DELAY1		
;***********************************************
TXDP:
	BTS0	TX_F
	RET
	BTS1	TXDTM1S_F
	RET
	BCLR	TXDTM1S_F
	INCMS	TXD_TMNS
	NOP
	BTS0	PEIDUI_F
	JMP	TXDP_PD
	MOV	A,TXD_STEP
	@JMP_A	5
	JMP	TXDP_S0		;TYPE
	JMP	TXDP_S1		;STATUS FIRST;2S
	JMP	TXDP_S2		;STATUS REPEAT;5S
TXDP_S0:
	MOV	A,TXD_TMNS
	SUB	A,#2
	BTS1	FC
	RET
	CLR	TXD_TMNS
	B0MOV	H,#0
	B0MOV	L,#TX_D0
	CLR	TABLE_PC
	CLR	DATA_BUF
TXDP_S01:
	B0MOV	Y,#TYPE_TABLE1$M
	B0MOV	Z,#TYPE_TABLE1$L
	MOV	A,TABLE_PC
	MOVCMP
	MOV	@HL,A		;TYPE
	MOV	A,@HL
	XOR	A,#0FFH
	BTS0	FZ
	JMP	TXDP_S02	;TX_INITP	;END
	MOV	A,@HL
	ADD	DATA_BUF,A
	INCMS	TABLE_PC
	NOP
	INCMS	L
	NOP
	JMP	TXDP_S01
TXDP_S02:
	MOV	A,DATA_BUF
	MOV	@HL,A
	INCMS	L
	NOP
	MOV	A,#0FFH
	MOV	@HL,A
	JMP	TX_INITP
	
TXDP_S1:
	MOV	A,TXD_TMNS
	SUB	A,#2
	BTS1	FC
	RET
TXDP_S10:
	CLR	TXD_TMNS
	B0MOV	H,#0
	B0MOV	L,#TX_D0
	MOV	A,#0A1H
	MOV	@HL,A
	MOV	DATA_BUF,A
	INCMS	L
	NOP
	MOV	A,MODE
	AND	A,#0FH
	MOV	@HL,A
	SWAP	ONF
	AND	A,#0F0H
	OR	@HL,A
	BTS0	DPOFF_F
	BSET	@HL.6
	MOV	A,@HL
	ADD	DATA_BUF,A
	INCMS	L
	NOP
	MOV	A,SPEED
	MOV	@HL,A
	MOV	A,@HL
	ADD	DATA_BUF,A
	INCMS	L
	NOP
	MOV	A,TM_HOUR2OFF	
	MOV	@HL,A
	MOV	A,@HL
	ADD	DATA_BUF,A
	INCMS	L
	NOP
	MOV	A,TM_MIN2OFF	
	MOV	@HL,A
	MOV	A,@HL
	ADD	DATA_BUF,A
	INCMS	L
	NOP
	MOV	A,TM_HOUR2ON	
	MOV	@HL,A
	MOV	A,@HL
	ADD	DATA_BUF,A
	INCMS	L
	NOP
	MOV	A,TM_MIN2ON	
	MOV	@HL,A
	MOV	A,@HL
	ADD	DATA_BUF,A
TXDP_S11:
	INCMS	L
	NOP
	MOV	A,DATA_BUF
	MOV	@HL,A		;CHKSUM	
	INCMS	L
	NOP
	MOV	A,#0FFH
	MOV	@HL,A	
	JMP	TX_INITP

TXDP_S2:
	BTS1	STATUSC_F
	JMP	TXDP_S21
	BCLR	STATUSC_F
	JMP	TXDP_S10		
TXDP_S21:		
	MOV	A,TXD_TMNS
	SUB	A,#5
	BTS1	FC
	RET
	JMP	TXDP_S10
TXDP_PD:
	BCLR	PEIDUI_F
	CLR	TXD_TMNS
	B0MOV	H,#0
	B0MOV	L,#TX_D0
	MOV	A,#0A2H
	MOV	@HL,A
	MOV	DATA_BUF,A
	JMP	TXDP_S11
		
TX_INITP:	
;	CLR	TX_SPACE
	BSET	TX_F
	CLR	TX_STEP
	CLR	TX_TM
	CLR	TX_LOOP
	RET		
;***********************************************
TXP:				;125US
	BTS0	TX_F
	JMP	TXP1
TXP0:
	BCLR	TX_F
;	BSET	TXCLK_B
	BSET	TXDATA_B
;	BCLR	ONK_F
	JMP	TXPE	
TXP1:
	MOV	A,TX_PC_BUF
	B0MOV	L,A
	INCMS	TX_TM
	NOP
TXP10:
;	BCLR	TXCLK_B
TXP11:
	MOV		A,TX_STEP
	B0ADD	PCL,A
	JMP		TXPS0		;5MS L
	JMP		TXPS1		;DATAH 125*2 US 
	JMP		TXPS2		;DATA L 125*2US OR 125*6US
	JMP		TXPS3		;10MS H
TXPS0:					;5MS L
	BCLR	TXDATA_B
	MOV	A,TX_TM
	SUB	A,#5000/125
	BTS1	FC
	JMP	TXPE	
TXPS01:	
	CLR	TX_TM
	INCMS	TX_STEP
	NOP
	MOV	A,TX_STEP
	SUB	A,#4
	BTS1	FC
	JMP	TXPS02
	CLR	TX_STEP
	INCMS	TX_LOOP
	NOP
	MOV	A,TX_LOOP
	SUB	A,#1	;2
	BTS1	FC	
	JMP	TXP10
	CLR	TXD_TMNS
	MOV	A,TXD_STEP
	BTS0	FZ
	JMP	TXP0	
	INCMS	TXD_STEP
	NOP
	MOV	A,TXD_STEP
	SUB	A,#2
	BTS1	FC
	JMP	TXP0
	MOV	A,#2
	MOV	TXD_STEP,A
	JMP	TXP0
TXPS02:
	MOV		A,TX_STEP
	XOR		A,#1
	BTS1	FZ
	JMP		TXP11
/*	CLR	TX_DATA0
	CLR	TX_DATA1
	CLR	TX_DATA2
	CLR	TX_DATA3
	BTS0	ONF_F
	BSET	TX_DATA0.7
	BTS0	ONK_F
	BSET	TX_DATA0.4
	BTS0	HW_MODE.1
	BSET	TX_DATA0.1
	BTS0	HW_MODE.0
	BSET	TX_DATA0.0
	
	MOV	A,PS_POWER
	AND	A,#0FH
	MOV	TX_DATA1,A
	SWAP	PS_MODE
	AND	A,#0F0H
	OR	TX_DATA1,A
	
	MOV	A,ZD_POWER
	AND	A,#0FH
	MOV	TX_DATA2,A
	SWAP	ZD_MODE
	AND	A,#0F0H
	OR	TX_DATA2,A
	
	MOV	A,TX_DATA0
	ADD	A,TX_DATA1
	ADD	A,TX_DATA2
	MOV	TX_DATA3,A
*/	
	B0MOV	H,#0
	B0MOV	L,#TX_D0
	MOV	TX_PC_BUF,A
TXPS03:	
	MOV	A,@HL
	MOV	TX_DATA_BUF,A
	CLR	TX_BIT
	JMP	TXP11
	
TXPS1:				;DATAH 0.3MS 
	BSET	TXDATA_B
	MOV	A,TX_TM
	SUB	A,#2
	BTS1	FC
	JMP	TXPE	
	JMP	TXPS01
TXPS2:					;DATA L 0.3MS	 OR 0.6MS
	BCLR	TXDATA_B
	BTS1	TX_DATA_BUF.0
	JMP		TXPS22
;	BTS1	TX_DATA0.0
;	JMP		TXPS22	
	MOV	A,TX_TM
	SUB	A,#2
	BTS1	FC
	JMP	TXPE	
	JMP	TXPS23
TXPS22:
	MOV	A,TX_TM
	SUB	A,#6
	BTS1	FC
	JMP	TXPE	
TXPS23:		
	CLR	TX_TM
	INCMS	TX_BIT
	NOP
	MOV	A,TX_BIT
	SUB	A,#8
	BTS0	FC
	JMP	TXPS24
	BCLR	FC
	RRCM	TX_DATA_BUF
	DECMS	TX_STEP
	NOP
	JMP	TXP11
TXPS3:
	BSET	TXDATA_B
	MOV	A,TX_TM
	SUB	A,#10000/125
	BTS1	FC
	JMP	TXPE	
	JMP	TXPS01	
TXPS24:
	CLR	TX_BIT
	INCMS	L
	NOP
	MOV	A,@HL
	XOR	A,#0FFH
	BTS0	FZ
	JMP		TXPS01	
	DECMS	TX_STEP
	NOP
	JMP	TXPS03	
TXPE:
	B0MOV	A,L
	MOV	TX_PC_BUF,A
	RET	
;*********************************
RX_CHKP:					;125US
	BTS0	RXFINISH_F
	JMP	RX_CHKPE1	
	MOV	A,RX_PC_BUF
	B0MOV	L,A
RX_CHKP0:	
	MOV		A,RX_STEP
	B0ADD	PCL,A
	JMP		RX_S0			;START L 5MS
	JMP		RX_S1			;DATA H 0.3MS
	JMP		RX_S2			;DATA L 0.3MS OR 0.6MS
	JMP		RX_S3			;SPACE H 5MS
RX_CHKP_ERR:
	CLR		RX_STEP
	CLR		RX_LCNT
	CLR		RX_HCNT
RX_CHKP_ERR1:	
	CLR		RX_BIT
	JMP	RX_CHKPE
RX_S0:						;CHK 5MS L
	BTS1	RXDATA_B
	JMP		RX_S0H
RX_LUP:	
	CLR		RX_HCNT
	INCMS	RX_LCNT				
	NOP
	MOV		A,RX_LCNT
	SUB		A,#250
	BTS1	FC
	JMP	RX_CHKPE
	MOV		A,#250			
	MOV		RX_LCNT,A
	JMP	RX_CHKPE
RX_S0H:	
	MOV		A,RX_LCNT
	SUB		A,#3000/125
	BTS1	FC
	JMP		RX_CHKP_ERR
	MOV		A,RX_LCNT
	SUB		A,#7000/125
	BTS0	FC
	JMP		RX_CHKP_ERR
	CLR		RX_LCNT
	MOV		A,#1
	MOV		RX_HCNT,A
	INCMS	RX_STEP
	NOP	
	B0MOV	H,#0
	B0MOV	L,#RX_D0
	MOV	RX_PC_BUF,A
RX_S0H1:	
;	MOV	A,@HL
;	MOV	RX_DATA_BUF,A
	CLR	RX_BIT
	JMP	RX_CHKPE	
RX_S1:							;CHK DATA H
	BTS0	RXDATA_B
	JMP		RX_S1L
RX_HUP:	
RX_S11:	
	CLR		RX_LCNT
	INCMS	RX_HCNT
	NOP
	MOV		A,RX_HCNT
	SUB		A,#5000/125
	BTS1	FC
	JMP	RX_CHKPE
;	MOV		A,#100			;END
;	MOV		RX_HCNT,A
	JMP	RX_S31		;RX_CHKPE
RX_S1L:
	MOV		A,RX_HCNT
	SUB		A,#1			
	BTS1	FC
	JMP		RX_CHKP_ERR	
	MOV		A,RX_HCNT
	SUB		A,#5
	BTS0	FC
	JMP		RX_CHKP_ERR
	INCMS	RX_STEP	
	NOP	
	CLR		RX_HCNT
	MOV		A,#1
	MOV		RX_LCNT,A
	JMP	RX_CHKPE		
RX_S2:								;CHK DATA L
	BTS0	RXDATA_B
	JMP		RX_LUP
RX_S2H:	
	MOV		A,RX_LCNT
	SUB		A,#1		;4*10/14
	BTS1	FC
	JMP		RX_CHKP_ERR
	MOV		A,RX_LCNT
	SUB		A,#9
	BTS0	FC
	JMP		RX_CHKP_ERR
	BCLR	RFD01_F
	MOV		A,RX_LCNT
	SUB		A,#4
	BTS1	FC
	BSET	RFD01_F
RX_IN1BIT:
	CLR		RX_LCNT
	MOV		A,#1
	MOV		RX_HCNT,A
	BCLR	FC
	BTS0	RFD01_F	
	BSET	FC
	RRCM	RX_DATA_BUF
	INCMS	RX_BIT
	NOP
	MOV		A,RX_BIT
	SUB		A,#8
	BTS1	FC
	JMP		RX_IN1BIT1
	CLR	RX_BIT
	DECMS	RX_STEP
	NOP
	MOV	A,RX_DATA_BUF
	MOV	@HL,A
	INCMS	L
	NOP
	JMP	RX_CHKPE
RX_IN1BIT1:
	DECMS	RX_STEP
	NOP
	JMP	RX_CHKPE	
RX_S3:					;SPACE H 5MS
	BTS0	RXDATA_B
	JMP	RX_CHKP_ERR
	INCMS	RX_HCNT
	NOP
	MOV		A,RX_HCNT
	SUB		A,#1000/125		
	BTS1	FC
	JMP	RX_CHKPE
RX_S31:		
	BSET	RXFINISH_F
;	INCMS	L
;	NOP
	MOV	A,#0FFH
	MOV	@HL,A
	JMP	RX_CHKP_ERR
RX_CHKPE:		
	B0MOV	A,L
	MOV	RX_PC_BUF,A
RX_CHKPE1:		
	RET						
;**************************	
RXDP:
	BTS1	RXFINISH_F
	JMP	RXP_NO			;RET
	BTS0	RXRELAX_F
	JMP	RXPE1
	CLR	DATA_BUF
	B0MOV	H,#0
	B0MOV	L,#RX_D0
RXDP1:	
	MOV	A,@HL
	XOR	A,#0FFH
	BTS0	FZ
	JMP	RXDP2		;DATA END
	MOV	A,@HL
	ADD	DATA_BUF,A
	INCMS	L
	NOP
	JMP	RXDP1
RXDP2:	
	DECMS	L
	NOP
	MOV	A,DATA_BUF
	SUB	A,@HL
	MOV	DATA_BUF,A
	MOV	A,@HL
	XOR	A,DATA_BUF
	BTS1	FZ			;CHKSUM OK
	JMP	RXPE1
RXDP3:				;RXD OK	
	B0MOV	H,#0
	B0MOV	L,#RX_D0
	MOV	A,@HL
	MOV	DATA_TYPE,A
	MOV	A,DATA_TYPE	;@HL
	XOR	A,#0A1H
	BTS0	FZ
	JMP	RXDP_STATUSP
	MOV	A,DATA_TYPE	;@HL
	XOR	A,#0A3H
	BTS0	FZ
	JMP	RXDP_STATUSP
	MOV	A,DATA_TYPE	;@HL
	XOR	A,#0A0H
	BTS0	FZ
	JMP	RXDP_TYPE	
	JMP	RXPE	
RXDP_TYPE:
	MOV	A,TXD_STEP
	BTS1	FZ
	JMP	RXPE		
	MOV	A,#1
	MOV	TXD_STEP,A
	MOV	A,ONF
	BTS1	FZ
	JMP	RXPE		
	BSET	DPALLON_F
	CLR	LEDFLASH_TM
	CLR	LEDFLASH_STEP
	JMP	RXPE		
					
RXDP_STATUSP:
	CLR	RXBZ_FLAG
	INCMS	L
	NOP
	MOV	A,@HL
	MOV	DATA_BUF,A
	BTS1	DATA_BUF.7
	JMP	RXDP_STATUSP12
	BTS0	WIFIONF_F
	JMP	RXDP_STATUSP13	
	BSET	WIFIONF_F
;	BSET	RXBZKEY_F
	JMP	RXDP_STATUSP13	
RXDP_STATUSP12:
	BTS1	WIFIONF_F
	JMP	RXDP_STATUSP13	
	BCLR	WIFIONF_F
;	BSET	RXBZKEY_F	
RXDP_STATUSP13:	
	MOV	A,DATA_TYPE	;@HL
	XOR	A,#0A3H
	BTS0	FZ
	JMP	RXDP_BZP		;RXDP_STATUSP8 »Ø´«Êý¾Ý
	BTS1	DATA_BUF.6
	JMP	RXDP_STATUSP131
	BTS0	DPOFF_F
	JMP	RXDP_STATUSP14	
	BSET	DPOFF_F
	BSET	RXBZKEY_F
	JMP	RXDP_STATUSP14	
RXDP_STATUSP131:
	BTS1	DPOFF_F
	JMP	RXDP_STATUSP14	
	BCLR	DPOFF_F
	BSET	RXBZKEY_F	
RXDP_STATUSP14:	
	BCLR	DNTM_F
	BTS0	DATA_BUF.3
	BSET	DNTM_F
	MOV	A,DATA_BUF
	AND	A,#07H
	XOR	A,MODE
	BTS0	FZ
	JMP	RXDP_STATUSP2
	BSET	RXBZKEY_F
	MOV	A,DATA_BUF
	AND	A,#07H
	MOV	MODE,A
RXDP_STATUSP2:
/*	MOV	A,#0C0H
	MOV	DATA_BUF,A
	BTS0	DATA_BUF.7
	BSET	DATA_BUF.1		
	BTS0	DATA_BUF.6
	BSET	DATA_BUF.0
*/	
	SWAP	DATA_BUF
	AND	A,#03H
	XOR	A,ONF
	BTS0	FZ
	JMP	RXDP_STATUSP3
	SWAP	DATA_BUF
	AND	A,#03H
	MOV	ONF,A
	MOV	A,ONF
	XOR	A,#2
	BTS1	FZ
	JMP	RXDP_STATUSP21
	BSET	RXBZON_F
	JMP	RXDP_STATUSP3
RXDP_STATUSP21:
	MOV	A,ONF
	XOR	A,#1
	BTS1	FZ
	JMP	RXDP_STATUSP22		
	BSET	RXBZKEY_F
	JMP	RXDP_STATUSP3
RXDP_STATUSP22:
	BSET	RXBZOFF_F
RXDP_STATUSP3:
	INCMS	L
	NOP
	MOV	A,@HL
	XOR	A,SPEED
	BTS0	FZ
	JMP	RXDP_STATUSP4	
	MOV	A,@HL
	MOV	SPEED,A
	BSET	RXBZKEY_F
RXDP_STATUSP4:
	BTS1	DNTM_F		
	JMP	RXDP_BZP		;NO TM DATA,NO CHANGE
	INCMS	L
	NOP
	MOV	A,@HL
	XOR	A,TM_HOUR2OFF
	BTS0	FZ
	JMP	RXDP_STATUSP5	
	MOV	A,@HL
	MOV	TM_HOUR2OFF,A
	CALL	RXD_DS_TMCLRP_CHK
	BSET	RXBZKEY_F
RXDP_STATUSP5:
	INCMS	L
	NOP
	MOV	A,@HL
	XOR	A,TM_MIN2OFF
	BTS0	FZ
	JMP	RXDP_STATUSP6	
	MOV	A,@HL
	MOV	TM_MIN2OFF,A
	CALL	RXD_DS_TMCLRP_CHK
	BSET	RXBZKEY_F
RXDP_STATUSP6:
	INCMS	L
	NOP
	MOV	A,@HL
	XOR	A,TM_HOUR2ON
	BTS0	FZ
	JMP	RXDP_STATUSP7	
	MOV	A,@HL
	MOV	TM_HOUR2ON,A
	CALL	RXD_YY_TMCLRP_CHK
	BSET	RXBZKEY_F
	MOV	A,TM_HOUR2ON
	BTS0	FZ
	JMP	RXDP_STATUSP7
	MOV	A,ONF
	SUB	A,#2
	BTS0	FC
	JMP	RXDP_STATUSP7	
	MOV	A,#1
	MOV	ONF,A			;TO YY
	CALL	RXD_YY_TMCLRP_CHK
RXDP_STATUSP7:
	INCMS	L
	NOP
	MOV	A,@HL
	XOR	A,TM_MIN2ON
	BTS0	FZ
	JMP	RXDP_STATUSP8	
	MOV	A,@HL
	MOV	TM_MIN2ON,A
	CALL	RXD_YY_TMCLRP_CHK
	BSET	RXBZKEY_F
	MOV	A,TM_MIN2ON
	BTS0	FZ
	JMP	RXDP_STATUSP8
	MOV	A,ONF
	SUB	A,#2
	BTS0	FC
	JMP	RXDP_STATUSP8
	MOV	A,#1
	MOV	ONF,A			;TO YY
	CALL	RXD_YY_TMCLRP_CHK
RXDP_STATUSP8:
	MOV	A,ONF
	XOR	A,#1
	BTS1	FZ
	JMP	RXDP_STATUSP801
	MOV	A,TM_MIN2ON
	BTS1	FZ
	JMP	RXDP_STATUSP801
	MOV	A,TM_HOUR2ON
	BTS1	FZ
	JMP	RXDP_STATUSP801
	CLR	ONF
	BSET	RXBZKEY_F			
RXDP_STATUSP801:
RXDP_BZP:
	BTS1	RXBZON_F
	JMP	RXDP_STATUSP81
	CALL	KEYP_ONBZP			
	JMP	RXPE	
RXDP_STATUSP81:
	BTS1	RXBZOFF_F
	JMP	RXDP_STATUSP82
	CALL	KEYP_OFFBZP			
	JMP	RXPE	
RXDP_STATUSP82:
	MOV	A,ONF
	BTS0	FZ
	JMP	RXPE	
	BTS1	RXBZKEY_F
	JMP	RXPE	
	CALL	KEYP_BZPM1
	JMP	RXPE	
			
RXP_NO:
	INCMS	RXNO_TM
	NOP
	MOV	A,RXNO_TM
	SUB	A,#2	;10
	BTS0	FC
	BCLR	RXRELAX_F
/*	MOV	A,RXNO_TM
	SUB	A,#250
	BTS1	FC
	RET
;	BTS1	ONF_F
;	RET
	BCLR	RXFINISH_F
	JMP	KEYP2OFF
*/
	RET
RXPE:	
	BSET	RXRELAX_F
RXPE1:		
	CLR	RXNO_TM
RXPE2:		
	BCLR	RXFINISH_F
	RET		
;***********************************************
	ORG		1400H				;
;*********************************	
TEMP_TABLE1:				;100K
	DW	100*255/(3779+100)		;-40C AS OPEN
	DW	100*255/(578+100)		;-10C
	DW	100*255/(546+100)		;-9C
	DW	100*255/(517+100)		;-8C
	DW	100*255/(489+100)		;-7C
	DW	100*255/(463+100)		;-6C
	DW	100*255/(438+100)		;-5C
	DW	100*255/(415+100)		;-4C
	DW	100*255/(394+100)		;-3C
	DW	100*255/(373+100)		;-2C
	DW	100*255/(354+100)		;-1C
	DW	100*255/(336+100)		;0C
	DW	100*255/(319+100)		;1C
	DW	100*255/(302+100)		;2C
	DW	100*255/(287+100)		;3C
	DW	100*255/(273+100)		;4C
	DW	100*255/(259+100)		;5C
	DW	100*255/(246+100)		;6C
	DW	100*255/(234+100)		;7C
	DW	100*255/(223+100)		;8C
	DW	100*255/(212+100)		;9C
	DW	100*255/(202+100)		;10C
	DW	100*255/(192+100)		;11C
	DW	100*255/(183+100)		;12C
	DW	100*255/(174+100)		;13C
	DW	100*255/(166+100)		;14C
	DW	100*255/(158+100)		;15C
	DW	100*255/(151+100)		;16C
	DW	100*255/(144+100)		;17C
	DW	100*255/(137+100)		;18C
	DW	100*255/(131+100)		;19C
	DW	100*255/(125+100)		;20C
	DW	100*255/(119+100)		;21C
	DW	100*255/(114+100)		;22C
	DW	100*255/(109+100)		;23C
	DW	100*255/(104+100)		;24C
	DW	100*255/(100+100)		;25C
	DW	100*255/(95+100)		;26C
	DW	100*255/(91+100)		;27C
	DW	100*255/(87+100)		;28C
	DW	100*255/(83+100)		;29C
	DW	100*255/(80+100)		;30C
	DW	100*255/(76+100)		;31C
	DW	100*255/(73+100)		;32C
	DW	100*255/(70+100)		;33C
	DW	100*255/(67+100)		;34C
	DW	100*255/(64+100)		;35C
	DW	100*255/(62+100)		;36C
	DW	100*255/(59+100)		;37C
	DW	100*255/(57+100)		;38C
	DW	100*255/(54+100)		;39C
	DW	100*255/(52+100)		;40C
	DW	100*255/(50+100)		;41C
	DW	100*255/(48+100)		;42C
	DW	100*255/(46+100)		;43C
	DW	100*255/(44+100)		;44C
	DW	100*255/(42+100)		;45C
	DW	100*255/(41+100)		;46C
	DW	100*255/(39+100)		;47C
	DW	100*255/(38+100)		;48C
	DW	100*255/(36+100)		;49C
	DW	100*255/(1+100)		;SHORT
	DW	0FFH					;END
;*********************************	
BHT_TABLE1:				;100K
	DW	100*255/(20+100)		;65C
	DW	100*255/(17+100)		;70C
	DW	0FFH				;END
	
;***********************************************
	ORG		1500H				;AS ISP ROM
TYPE_ISP_ROM_ADR:				;16 BYTE
;	DW		0010H
;***********************************************
	ORG		1600H				;AS ISP ROM
DATA_ISP_ROM_ADR:	
;	DW		0010H

;***********************************************
	ORG		17F0H						;End of Program
	ENDP